/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index_osc.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/base64-js/index.js":
/*!*****************************************!*\
  !*** ./node_modules/base64-js/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  for (var i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n\n\n//# sourceURL=webpack:///./node_modules/base64-js/index.js?");

/***/ }),

/***/ "./node_modules/buffer/index.js":
/*!**************************************!*\
  !*** ./node_modules/buffer/index.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global) {/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n\n\nvar base64 = __webpack_require__(/*! base64-js */ \"./node_modules/base64-js/index.js\")\nvar ieee754 = __webpack_require__(/*! ieee754 */ \"./node_modules/ieee754/index.js\")\nvar isArray = __webpack_require__(/*! isarray */ \"./node_modules/isarray/index.js\")\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))\n\n//# sourceURL=webpack:///./node_modules/buffer/index.js?");

/***/ }),

/***/ "./node_modules/events/events.js":
/*!***************************************!*\
  !*** ./node_modules/events/events.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction $getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return $getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = $getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  var args = [];\n  for (var i = 0; i < arguments.length; i++) args.push(arguments[i]);\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    ReflectApply(this.listener, this.target, args);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      if (typeof listener !== 'function') {\n        throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n      }\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      if (typeof listener !== 'function') {\n        throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n      }\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\n\n//# sourceURL=webpack:///./node_modules/events/events.js?");

/***/ }),

/***/ "./node_modules/ieee754/index.js":
/*!***************************************!*\
  !*** ./node_modules/ieee754/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n\n\n//# sourceURL=webpack:///./node_modules/ieee754/index.js?");

/***/ }),

/***/ "./node_modules/isarray/index.js":
/*!***************************************!*\
  !*** ./node_modules/isarray/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n\n\n//# sourceURL=webpack:///./node_modules/isarray/index.js?");

/***/ }),

/***/ "./node_modules/long/src/long.js":
/*!***************************************!*\
  !*** ./node_modules/long/src/long.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n\n\n//# sourceURL=webpack:///./node_modules/long/src/long.js?");

/***/ }),

/***/ "./node_modules/osc/dist/osc-browser.js":
/*!**********************************************!*\
  !*** ./node_modules/osc/dist/osc-browser.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process, Buffer) {var __WEBPACK_AMD_DEFINE_RESULT__;/*! osc.js 2.2.4, Copyright 2018 Colin Clark | github.com/colinbdclark/osc.js */\n\n/*\n * osc.js: An Open Sound Control library for JavaScript that works in both the browser and Node.js\n *\n * Copyright 2014-2016, Colin Clark\n * Licensed under the MIT and GPL 3 licenses.\n */\n\n/* global require, module, process, Buffer, Long */\n\nvar osc = osc || {};\n\n(function () {\n\n    \"use strict\";\n\n    osc.SECS_70YRS = 2208988800;\n    osc.TWO_32 = 4294967296;\n\n    osc.defaults = {\n        metadata: false,\n        unpackSingleArgs: true\n    };\n\n    // Unsupported, non-API property.\n    osc.isCommonJS =  true && module.exports ? true : false;\n\n    // Unsupported, non-API property.\n    osc.isNode = osc.isCommonJS && typeof window === \"undefined\";\n\n    // Unsupported, non-API property.\n    osc.isElectron = typeof process !== \"undefined\" &&\n        process.versions && process.versions.electron ? true : false;\n\n    // Unsupported, non-API property.\n    osc.isBufferEnv = osc.isNode || osc.isElectron;\n\n    // Unsupported, non-API function.\n    osc.isArray = function (obj) {\n        return obj && Object.prototype.toString.call(obj) === \"[object Array]\";\n    };\n\n    // Unsupported, non-API function.\n    osc.isTypedArrayView = function (obj) {\n        return obj.buffer && obj.buffer instanceof ArrayBuffer;\n    };\n\n    // Unsupported, non-API function.\n    osc.isBuffer = function (obj) {\n        return osc.isBufferEnv && obj instanceof Buffer;\n    };\n\n    // Unsupported, non-API member.\n    osc.Long = typeof Long !== \"undefined\" ? Long :\n        osc.isNode ? __webpack_require__(/*! long */ \"./node_modules/long/src/long.js\") : undefined;\n\n    /**\n     * Wraps the specified object in a DataView.\n     *\n     * @param {Array-like} obj the object to wrap in a DataView instance\n     * @return {DataView} the DataView object\n     */\n    // Unsupported, non-API function.\n    osc.dataView = function (obj, offset, length) {\n        if (obj.buffer) {\n            return new DataView(obj.buffer, offset, length);\n        }\n\n        if (obj instanceof ArrayBuffer) {\n            return new DataView(obj, offset, length);\n        }\n\n        return new DataView(new Uint8Array(obj), offset, length);\n    };\n\n    /**\n     * Takes an ArrayBuffer, TypedArray, DataView, Buffer, or array-like object\n     * and returns a Uint8Array view of it.\n     *\n     * Throws an error if the object isn't suitably array-like.\n     *\n     * @param {Array-like or Array-wrapping} obj an array-like or array-wrapping object\n     * @returns {Uint8Array} a typed array of octets\n     */\n    // Unsupported, non-API function.\n    osc.byteArray = function (obj) {\n        if (obj instanceof Uint8Array) {\n            return obj;\n        }\n\n        var buf = obj.buffer ? obj.buffer : obj;\n\n        if (!(buf instanceof ArrayBuffer) && (typeof buf.length === \"undefined\" || typeof buf === \"string\")) {\n            throw new Error(\"Can't wrap a non-array-like object as Uint8Array. Object was: \" +\n                JSON.stringify(obj, null, 2));\n        }\n\n\n        // TODO gh-39: This is a potentially unsafe algorithm;\n        // if we're getting anything other than a TypedArrayView (such as a DataView),\n        // we really need to determine the range of the view it is viewing.\n        return new Uint8Array(buf);\n    };\n\n    /**\n     * Takes an ArrayBuffer, TypedArray, DataView, or array-like object\n     * and returns a native buffer object\n     * (i.e. in Node.js, a Buffer object and in the browser, a Uint8Array).\n     *\n     * Throws an error if the object isn't suitably array-like.\n     *\n     * @param {Array-like or Array-wrapping} obj an array-like or array-wrapping object\n     * @returns {Buffer|Uint8Array} a buffer object\n     */\n    // Unsupported, non-API function.\n    osc.nativeBuffer = function (obj) {\n        if (osc.isBufferEnv) {\n            return osc.isBuffer(obj) ? obj :\n                new Buffer(obj.buffer ? obj : new Uint8Array(obj));\n        }\n\n        return osc.isTypedArrayView(obj) ? obj : new Uint8Array(obj);\n    };\n\n    // Unsupported, non-API function\n    osc.copyByteArray = function (source, target, offset) {\n        if (osc.isTypedArrayView(source) && osc.isTypedArrayView(target)) {\n            target.set(source, offset);\n        } else {\n            var start = offset === undefined ? 0 : offset,\n                len = Math.min(target.length - offset, source.length);\n\n            for (var i = 0, j = start; i < len; i++, j++) {\n                target[j] = source[i];\n            }\n        }\n\n        return target;\n    };\n\n    /**\n     * Reads an OSC-formatted string.\n     *\n     * @param {DataView} dv a DataView containing the raw bytes of the OSC string\n     * @param {Object} offsetState an offsetState object used to store the current offset index\n     * @return {String} the JavaScript String that was read\n     */\n    osc.readString = function (dv, offsetState) {\n        var charCodes = [],\n            idx = offsetState.idx;\n\n        for (; idx < dv.byteLength; idx++) {\n            var charCode = dv.getUint8(idx);\n            if (charCode !== 0) {\n                charCodes.push(charCode);\n            } else {\n                idx++;\n                break;\n            }\n        }\n\n        // Round to the nearest 4-byte block.\n        idx = (idx + 3) & ~0x03;\n        offsetState.idx = idx;\n\n        return String.fromCharCode.apply(null, charCodes);\n    };\n\n    /**\n     * Writes a JavaScript string as an OSC-formatted string.\n     *\n     * @param {String} str the string to write\n     * @return {Uint8Array} a buffer containing the OSC-formatted string\n     */\n    osc.writeString = function (str) {\n        var terminated = str + \"\\u0000\",\n            len = terminated.length,\n            paddedLen = (len + 3) & ~0x03,\n            arr = new Uint8Array(paddedLen);\n\n        for (var i = 0; i < terminated.length; i++) {\n            var charCode = terminated.charCodeAt(i);\n            arr[i] = charCode;\n        }\n\n        return arr;\n    };\n\n    // Unsupported, non-API function.\n    osc.readPrimitive = function (dv, readerName, numBytes, offsetState) {\n        var val = dv[readerName](offsetState.idx, false);\n        offsetState.idx += numBytes;\n\n        return val;\n    };\n\n    // Unsupported, non-API function.\n    osc.writePrimitive = function (val, dv, writerName, numBytes, offset) {\n        offset = offset === undefined ? 0 : offset;\n\n        var arr;\n        if (!dv) {\n            arr = new Uint8Array(numBytes);\n            dv = new DataView(arr.buffer);\n        } else {\n            arr = new Uint8Array(dv.buffer);\n        }\n\n        dv[writerName](offset, val, false);\n\n        return arr;\n    };\n\n    /**\n     * Reads an OSC int32 (\"i\") value.\n     *\n     * @param {DataView} dv a DataView containing the raw bytes\n     * @param {Object} offsetState an offsetState object used to store the current offset index into dv\n     * @return {Number} the number that was read\n     */\n    osc.readInt32 = function (dv, offsetState) {\n        return osc.readPrimitive(dv, \"getInt32\", 4, offsetState);\n    };\n\n    /**\n     * Writes an OSC int32 (\"i\") value.\n     *\n     * @param {Number} val the number to write\n     * @param {DataView} [dv] a DataView instance to write the number into\n     * @param {Number} [offset] an offset into dv\n     */\n    osc.writeInt32 = function (val, dv, offset) {\n        return osc.writePrimitive(val, dv, \"setInt32\", 4, offset);\n    };\n\n    /**\n     * Reads an OSC int64 (\"h\") value.\n     *\n     * @param {DataView} dv a DataView containing the raw bytes\n     * @param {Object} offsetState an offsetState object used to store the current offset index into dv\n     * @return {Number} the number that was read\n     */\n    osc.readInt64 = function (dv, offsetState) {\n        var high = osc.readPrimitive(dv, \"getInt32\", 4, offsetState),\n            low = osc.readPrimitive(dv, \"getInt32\", 4, offsetState);\n\n        if (osc.Long) {\n            return new osc.Long(low, high);\n        } else {\n            return {\n                high: high,\n                low: low,\n                unsigned: false\n            };\n        }\n    };\n\n    /**\n     * Writes an OSC int64 (\"h\") value.\n     *\n     * @param {Number} val the number to write\n     * @param {DataView} [dv] a DataView instance to write the number into\n     * @param {Number} [offset] an offset into dv\n     */\n    osc.writeInt64 = function (val, dv, offset) {\n        var arr = new Uint8Array(8);\n        arr.set(osc.writePrimitive(val.high, dv, \"setInt32\", 4, offset), 0);\n        arr.set(osc.writePrimitive(val.low,  dv, \"setInt32\", 4, offset + 4), 4);\n        return arr;\n    };\n\n    /**\n     * Reads an OSC float32 (\"f\") value.\n     *\n     * @param {DataView} dv a DataView containing the raw bytes\n     * @param {Object} offsetState an offsetState object used to store the current offset index into dv\n     * @return {Number} the number that was read\n     */\n    osc.readFloat32 = function (dv, offsetState) {\n        return osc.readPrimitive(dv, \"getFloat32\", 4, offsetState);\n    };\n\n    /**\n     * Writes an OSC float32 (\"f\") value.\n     *\n     * @param {Number} val the number to write\n     * @param {DataView} [dv] a DataView instance to write the number into\n     * @param {Number} [offset] an offset into dv\n     */\n    osc.writeFloat32 = function (val, dv, offset) {\n        return osc.writePrimitive(val, dv, \"setFloat32\", 4, offset);\n    };\n\n    /**\n     * Reads an OSC float64 (\"d\") value.\n     *\n     * @param {DataView} dv a DataView containing the raw bytes\n     * @param {Object} offsetState an offsetState object used to store the current offset index into dv\n     * @return {Number} the number that was read\n     */\n    osc.readFloat64 = function (dv, offsetState) {\n        return osc.readPrimitive(dv, \"getFloat64\", 8, offsetState);\n    };\n\n    /**\n     * Writes an OSC float64 (\"d\") value.\n     *\n     * @param {Number} val the number to write\n     * @param {DataView} [dv] a DataView instance to write the number into\n     * @param {Number} [offset] an offset into dv\n     */\n    osc.writeFloat64 = function (val, dv, offset) {\n        return osc.writePrimitive(val, dv, \"setFloat64\", 8, offset);\n    };\n\n    /**\n     * Reads an OSC 32-bit ASCII character (\"c\") value.\n     *\n     * @param {DataView} dv a DataView containing the raw bytes\n     * @param {Object} offsetState an offsetState object used to store the current offset index into dv\n     * @return {String} a string containing the read character\n     */\n    osc.readChar32 = function (dv, offsetState) {\n        var charCode = osc.readPrimitive(dv, \"getUint32\", 4, offsetState);\n        return String.fromCharCode(charCode);\n    };\n\n    /**\n     * Writes an OSC 32-bit ASCII character (\"c\") value.\n     *\n     * @param {String} str the string from which the first character will be written\n     * @param {DataView} [dv] a DataView instance to write the character into\n     * @param {Number} [offset] an offset into dv\n     * @return {String} a string containing the read character\n     */\n    osc.writeChar32 = function (str, dv, offset) {\n        var charCode = str.charCodeAt(0);\n        if (charCode === undefined || charCode < -1) {\n            return undefined;\n        }\n\n        return osc.writePrimitive(charCode, dv, \"setUint32\", 4, offset);\n    };\n\n    /**\n     * Reads an OSC blob (\"b\") (i.e. a Uint8Array).\n     *\n     * @param {DataView} dv a DataView instance to read from\n     * @param {Object} offsetState an offsetState object used to store the current offset index into dv\n     * @return {Uint8Array} the data that was read\n     */\n    osc.readBlob = function (dv, offsetState) {\n        var len = osc.readInt32(dv, offsetState),\n            paddedLen = (len + 3) & ~0x03,\n            blob = new Uint8Array(dv.buffer, offsetState.idx, len);\n\n        offsetState.idx += paddedLen;\n\n        return blob;\n    };\n\n    /**\n     * Writes a raw collection of bytes to a new ArrayBuffer.\n     *\n     * @param {Array-like} data a collection of octets\n     * @return {ArrayBuffer} a buffer containing the OSC-formatted blob\n     */\n    osc.writeBlob = function (data) {\n        data = osc.byteArray(data);\n\n        var len = data.byteLength,\n            paddedLen = (len + 3) & ~0x03,\n            offset = 4, // Extra 4 bytes is for the size.\n            blobLen = paddedLen + offset,\n            arr = new Uint8Array(blobLen),\n            dv = new DataView(arr.buffer);\n\n        // Write the size.\n        osc.writeInt32(len, dv);\n\n        // Since we're writing to a real ArrayBuffer,\n        // we don't need to pad the remaining bytes.\n        arr.set(data, offset);\n\n        return arr;\n    };\n\n    /**\n     * Reads an OSC 4-byte MIDI message.\n     *\n     * @param {DataView} dv the DataView instance to read from\n     * @param {Object} offsetState an offsetState object used to store the current offset index into dv\n     * @return {Uint8Array} an array containing (in order) the port ID, status, data1 and data1 bytes\n     */\n    osc.readMIDIBytes = function (dv, offsetState) {\n        var midi = new Uint8Array(dv.buffer, offsetState.idx, 4);\n        offsetState.idx += 4;\n\n        return midi;\n    };\n\n    /**\n     * Writes an OSC 4-byte MIDI message.\n     *\n     * @param {Array-like} bytes a 4-element array consisting of the port ID, status, data1 and data1 bytes\n     * @return {Uint8Array} the written message\n     */\n    osc.writeMIDIBytes = function (bytes) {\n        bytes = osc.byteArray(bytes);\n\n        var arr = new Uint8Array(4);\n        arr.set(bytes);\n\n        return arr;\n    };\n\n    /**\n     * Reads an OSC RGBA colour value.\n     *\n     * @param {DataView} dv the DataView instance to read from\n     * @param {Object} offsetState an offsetState object used to store the current offset index into dv\n     * @return {Object} a colour object containing r, g, b, and a properties\n     */\n    osc.readColor = function (dv, offsetState) {\n        var bytes = new Uint8Array(dv.buffer, offsetState.idx, 4),\n            alpha = bytes[3] / 255;\n\n        offsetState.idx += 4;\n\n        return {\n            r: bytes[0],\n            g: bytes[1],\n            b: bytes[2],\n            a: alpha\n        };\n    };\n\n    /**\n     * Writes an OSC RGBA colour value.\n     *\n     * @param {Object} color a colour object containing r, g, b, and a properties\n     * @return {Uint8Array} a byte array containing the written color\n     */\n    osc.writeColor = function (color) {\n        var alpha = Math.round(color.a * 255),\n            arr = new Uint8Array([color.r, color.g, color.b, alpha]);\n\n        return arr;\n    };\n\n    /**\n     * Reads an OSC true (\"T\") value by directly returning the JavaScript Boolean \"true\".\n     */\n    osc.readTrue = function () {\n        return true;\n    };\n\n    /**\n     * Reads an OSC false (\"F\") value by directly returning the JavaScript Boolean \"false\".\n     */\n    osc.readFalse = function () {\n        return false;\n    };\n\n    /**\n     * Reads an OSC nil (\"N\") value by directly returning the JavaScript \"null\" value.\n     */\n    osc.readNull = function () {\n        return null;\n    };\n\n    /**\n     * Reads an OSC impulse/bang/infinitum (\"I\") value by directly returning 1.0.\n     */\n    osc.readImpulse = function () {\n        return 1.0;\n    };\n\n    /**\n     * Reads an OSC time tag (\"t\").\n     *\n     * @param {DataView} dv the DataView instance to read from\n     * @param {Object} offsetState an offset state object containing the current index into dv\n     * @param {Object} a time tag object containing both the raw NTP as well as the converted native (i.e. JS/UNIX) time\n     */\n    osc.readTimeTag = function (dv, offsetState) {\n        var secs1900 = osc.readPrimitive(dv, \"getUint32\", 4, offsetState),\n            frac = osc.readPrimitive(dv, \"getUint32\", 4, offsetState),\n            native = (secs1900 === 0 && frac === 1) ? Date.now() : osc.ntpToJSTime(secs1900, frac);\n\n        return {\n            raw: [secs1900, frac],\n            native: native\n        };\n    };\n\n    /**\n     * Writes an OSC time tag (\"t\").\n     *\n     * Takes, as its argument, a time tag object containing either a \"raw\" or \"native property.\"\n     * The raw timestamp must conform to the NTP standard representation, consisting of two unsigned int32\n     * values. The first represents the number of seconds since January 1, 1900; the second, fractions of a second.\n     * \"Native\" JavaScript timestamps are specified as a Number representing milliseconds since January 1, 1970.\n     *\n     * @param {Object} timeTag time tag object containing either a native JS timestamp (in ms) or a NTP timestamp pair\n     * @return {Uint8Array} raw bytes for the written time tag\n     */\n    osc.writeTimeTag = function (timeTag) {\n        var raw = timeTag.raw ? timeTag.raw : osc.jsToNTPTime(timeTag.native),\n            arr = new Uint8Array(8), // Two Unit32s.\n            dv = new DataView(arr.buffer);\n\n        osc.writeInt32(raw[0], dv, 0);\n        osc.writeInt32(raw[1], dv, 4);\n\n        return arr;\n    };\n\n    /**\n     * Produces a time tag containing a raw NTP timestamp\n     * relative to now by the specified number of seconds.\n     *\n     * @param {Number} secs the number of seconds relative to now (i.e. + for the future, - for the past)\n     * @param {Number} now the number of milliseconds since epoch to use as the current time. Defaults to Date.now()\n     * @return {Object} the time tag\n     */\n    osc.timeTag = function (secs, now) {\n        secs = secs || 0;\n        now = now || Date.now();\n\n        var nowSecs = now / 1000,\n            nowWhole = Math.floor(nowSecs),\n            nowFracs = nowSecs - nowWhole,\n            secsWhole = Math.floor(secs),\n            secsFracs = secs - secsWhole,\n            fracs = nowFracs + secsFracs;\n\n        if (fracs > 1) {\n            var fracsWhole = Math.floor(fracs),\n                fracsFracs = fracs - fracsWhole;\n\n            secsWhole += fracsWhole;\n            fracs = fracsFracs;\n        }\n\n        var ntpSecs = nowWhole + secsWhole + osc.SECS_70YRS,\n            ntpFracs = Math.round(osc.TWO_32 * fracs);\n\n        return {\n            raw: [ntpSecs, ntpFracs]\n        };\n    };\n\n    /**\n     * Converts OSC's standard time tag representation (which is the NTP format)\n     * into the JavaScript/UNIX format in milliseconds.\n     *\n     * @param {Number} secs1900 the number of seconds since 1900\n     * @param {Number} frac the number of fractions of a second (between 0 and 2^32)\n     * @return {Number} a JavaScript-compatible timestamp in milliseconds\n     */\n    osc.ntpToJSTime = function (secs1900, frac) {\n        var secs1970 = secs1900 - osc.SECS_70YRS,\n            decimals = frac / osc.TWO_32,\n            msTime = (secs1970 + decimals) * 1000;\n\n        return msTime;\n    };\n\n    osc.jsToNTPTime = function (jsTime) {\n        var secs = jsTime / 1000,\n            secsWhole = Math.floor(secs),\n            secsFrac = secs - secsWhole,\n            ntpSecs = secsWhole + osc.SECS_70YRS,\n            ntpFracs = Math.round(osc.TWO_32 * secsFrac);\n\n        return [ntpSecs, ntpFracs];\n    };\n\n    /**\n     * Reads the argument portion of an OSC message.\n     *\n     * @param {DataView} dv a DataView instance to read from\n     * @param {Object} offsetState the offsetState object that stores the current offset into dv\n     * @param {Object} [options] read options\n     * @return {Array} an array of the OSC arguments that were read\n     */\n    osc.readArguments = function (dv, options, offsetState) {\n        var typeTagString = osc.readString(dv, offsetState);\n        if (typeTagString.indexOf(\",\") !== 0) {\n            // Despite what the OSC 1.0 spec says,\n            // it just doesn't make sense to handle messages without type tags.\n            // scsynth appears to read such messages as if they have a single\n            // Uint8 argument. sclang throws an error if the type tag is omitted.\n            throw new Error(\"A malformed type tag string was found while reading \" +\n                \"the arguments of an OSC message. String was: \" +\n                typeTagString, \" at offset: \" + offsetState.idx);\n        }\n\n        var argTypes = typeTagString.substring(1).split(\"\"),\n            args = [];\n\n        osc.readArgumentsIntoArray(args, argTypes, typeTagString, dv, options, offsetState);\n\n        return args;\n    };\n\n    // Unsupported, non-API function.\n    osc.readArgument = function (argType, typeTagString, dv, options, offsetState) {\n        var typeSpec = osc.argumentTypes[argType];\n        if (!typeSpec) {\n            throw new Error(\"'\" + argType + \"' is not a valid OSC type tag. Type tag string was: \" + typeTagString);\n        }\n\n        var argReader = typeSpec.reader,\n            arg = osc[argReader](dv, offsetState);\n\n        if (options.metadata) {\n            arg = {\n                type: argType,\n                value: arg\n            };\n        }\n\n        return arg;\n    };\n\n    // Unsupported, non-API function.\n    osc.readArgumentsIntoArray = function (arr, argTypes, typeTagString, dv, options, offsetState) {\n        var i = 0;\n\n        while (i < argTypes.length) {\n            var argType = argTypes[i],\n                arg;\n\n            if (argType === \"[\") {\n                var fromArrayOpen = argTypes.slice(i + 1),\n                    endArrayIdx = fromArrayOpen.indexOf(\"]\");\n\n                if (endArrayIdx < 0) {\n                    throw new Error(\"Invalid argument type tag: an open array type tag ('[') was found \" +\n                        \"without a matching close array tag ('[]'). Type tag was: \" + typeTagString);\n                }\n\n                var typesInArray = fromArrayOpen.slice(0, endArrayIdx);\n                arg = osc.readArgumentsIntoArray([], typesInArray, typeTagString, dv, options, offsetState);\n                i += endArrayIdx + 2;\n            } else {\n                arg = osc.readArgument(argType, typeTagString, dv, options, offsetState);\n                i++;\n            }\n\n            arr.push(arg);\n        }\n\n        return arr;\n    };\n\n    /**\n     * Writes the specified arguments.\n     *\n     * @param {Array} args an array of arguments\n     * @param {Object} options options for writing\n     * @return {Uint8Array} a buffer containing the OSC-formatted argument type tag and values\n     */\n    osc.writeArguments = function (args, options) {\n        var argCollection = osc.collectArguments(args, options);\n        return osc.joinParts(argCollection);\n    };\n\n    // Unsupported, non-API function.\n    osc.joinParts = function (dataCollection) {\n        var buf = new Uint8Array(dataCollection.byteLength),\n            parts = dataCollection.parts,\n            offset = 0;\n\n        for (var i = 0; i < parts.length; i++) {\n            var part = parts[i];\n            osc.copyByteArray(part, buf, offset);\n            offset += part.length;\n        }\n\n        return buf;\n    };\n\n    // Unsupported, non-API function.\n    osc.addDataPart = function (dataPart, dataCollection) {\n        dataCollection.parts.push(dataPart);\n        dataCollection.byteLength += dataPart.length;\n    };\n\n    osc.writeArrayArguments = function (args, dataCollection) {\n        var typeTag = \"[\";\n\n        for (var i = 0; i < args.length; i++) {\n            var arg = args[i];\n            typeTag += osc.writeArgument(arg, dataCollection);\n        }\n\n        typeTag += \"]\";\n\n        return typeTag;\n    };\n\n    osc.writeArgument = function (arg, dataCollection) {\n        if (osc.isArray(arg)) {\n            return osc.writeArrayArguments(arg, dataCollection);\n        }\n\n        var type = arg.type,\n            writer = osc.argumentTypes[type].writer;\n\n        if (writer) {\n            var data = osc[writer](arg.value);\n            osc.addDataPart(data, dataCollection);\n        }\n\n        return arg.type;\n    };\n\n    // Unsupported, non-API function.\n    osc.collectArguments = function (args, options, dataCollection) {\n        if (!osc.isArray(args)) {\n            args = typeof args === \"undefined\" ? [] : [args];\n        }\n\n        dataCollection = dataCollection || {\n            byteLength: 0,\n            parts: []\n        };\n\n        if (!options.metadata) {\n            args = osc.annotateArguments(args);\n        }\n\n        var typeTagString = \",\",\n            currPartIdx = dataCollection.parts.length;\n\n        for (var i = 0; i < args.length; i++) {\n            var arg = args[i];\n            typeTagString += osc.writeArgument(arg, dataCollection);\n        }\n\n        var typeData = osc.writeString(typeTagString);\n        dataCollection.byteLength += typeData.byteLength;\n        dataCollection.parts.splice(currPartIdx, 0, typeData);\n\n        return dataCollection;\n    };\n\n    /**\n     * Reads an OSC message.\n     *\n     * @param {Array-like} data an array of bytes to read from\n     * @param {Object} [options] read options\n     * @param {Object} [offsetState] an offsetState object that stores the current offset into dv\n     * @return {Object} the OSC message, formatted as a JavaScript object containing \"address\" and \"args\" properties\n     */\n    osc.readMessage = function (data, options, offsetState) {\n        options = options || osc.defaults;\n\n        var dv = osc.dataView(data, data.byteOffset, data.byteLength);\n        offsetState = offsetState || {\n            idx: 0\n        };\n\n        var address = osc.readString(dv, offsetState);\n        return osc.readMessageContents(address, dv, options, offsetState);\n    };\n\n    // Unsupported, non-API function.\n    osc.readMessageContents = function (address, dv, options, offsetState) {\n        if (address.indexOf(\"/\") !== 0) {\n            throw new Error(\"A malformed OSC address was found while reading \" +\n                \"an OSC message. String was: \" + address);\n        }\n\n        var args = osc.readArguments(dv, options, offsetState);\n\n        return {\n            address: address,\n            args: args.length === 1 && options.unpackSingleArgs ? args[0] : args\n        };\n    };\n\n    // Unsupported, non-API function.\n    osc.collectMessageParts = function (msg, options, dataCollection) {\n        dataCollection = dataCollection || {\n            byteLength: 0,\n            parts: []\n        };\n\n        osc.addDataPart(osc.writeString(msg.address), dataCollection);\n        return osc.collectArguments(msg.args, options, dataCollection);\n    };\n\n    /**\n     * Writes an OSC message.\n     *\n     * @param {Object} msg a message object containing \"address\" and \"args\" properties\n     * @param {Object} [options] write options\n     * @return {Uint8Array} an array of bytes containing the OSC message\n     */\n    osc.writeMessage = function (msg, options) {\n        options = options || osc.defaults;\n\n        if (!osc.isValidMessage(msg)) {\n            throw new Error(\"An OSC message must contain a valid address. Message was: \" +\n                JSON.stringify(msg, null, 2));\n        }\n\n        var msgCollection = osc.collectMessageParts(msg, options);\n        return osc.joinParts(msgCollection);\n    };\n\n    osc.isValidMessage = function (msg) {\n        return msg.address && msg.address.indexOf(\"/\") === 0;\n    };\n\n    /**\n     * Reads an OSC bundle.\n     *\n     * @param {DataView} dv the DataView instance to read from\n     * @param {Object} [options] read optoins\n     * @param {Object} [offsetState] an offsetState object that stores the current offset into dv\n     * @return {Object} the bundle or message object that was read\n     */\n    osc.readBundle = function (dv, options, offsetState) {\n        return osc.readPacket(dv, options, offsetState);\n    };\n\n    // Unsupported, non-API function.\n    osc.collectBundlePackets = function (bundle, options, dataCollection) {\n        dataCollection = dataCollection || {\n            byteLength: 0,\n            parts: []\n        };\n\n        osc.addDataPart(osc.writeString(\"#bundle\"), dataCollection);\n        osc.addDataPart(osc.writeTimeTag(bundle.timeTag), dataCollection);\n\n        for (var i = 0; i < bundle.packets.length; i++) {\n            var packet = bundle.packets[i],\n                collector = packet.address ? osc.collectMessageParts : osc.collectBundlePackets,\n                packetCollection = collector(packet, options);\n\n            dataCollection.byteLength += packetCollection.byteLength;\n            osc.addDataPart(osc.writeInt32(packetCollection.byteLength), dataCollection);\n            dataCollection.parts = dataCollection.parts.concat(packetCollection.parts);\n        }\n\n        return dataCollection;\n    };\n\n    /**\n     * Writes an OSC bundle.\n     *\n     * @param {Object} a bundle object containing \"timeTag\" and \"packets\" properties\n     * @param {object} [options] write options\n     * @return {Uint8Array} an array of bytes containing the message\n     */\n    osc.writeBundle = function (bundle, options) {\n        if (!osc.isValidBundle(bundle)) {\n            throw new Error(\"An OSC bundle must contain 'timeTag' and 'packets' properties. \" +\n                \"Bundle was: \" + JSON.stringify(bundle, null, 2));\n        }\n\n        options = options || osc.defaults;\n        var bundleCollection = osc.collectBundlePackets(bundle, options);\n\n        return osc.joinParts(bundleCollection);\n    };\n\n    osc.isValidBundle = function (bundle) {\n        return bundle.timeTag !== undefined && bundle.packets !== undefined;\n    };\n\n    // Unsupported, non-API function.\n    osc.readBundleContents = function (dv, options, offsetState, len) {\n        var timeTag = osc.readTimeTag(dv, offsetState),\n            packets = [];\n\n        while (offsetState.idx < len) {\n            var packetSize = osc.readInt32(dv, offsetState),\n                packetLen = offsetState.idx + packetSize,\n                packet = osc.readPacket(dv, options, offsetState, packetLen);\n\n            packets.push(packet);\n        }\n\n        return {\n            timeTag: timeTag,\n            packets: packets\n        };\n    };\n\n    /**\n     * Reads an OSC packet, which may consist of either a bundle or a message.\n     *\n     * @param {Array-like} data an array of bytes to read from\n     * @param {Object} [options] read options\n     * @return {Object} a bundle or message object\n     */\n    osc.readPacket = function (data, options, offsetState, len) {\n        var dv = osc.dataView(data, data.byteOffset, data.byteLength);\n\n        len = len === undefined ? dv.byteLength : len;\n        offsetState = offsetState || {\n            idx: 0\n        };\n\n        var header = osc.readString(dv, offsetState),\n            firstChar = header[0];\n\n        if (firstChar === \"#\") {\n            return osc.readBundleContents(dv, options, offsetState, len);\n        } else if (firstChar === \"/\") {\n            return osc.readMessageContents(header, dv, options, offsetState);\n        }\n\n        throw new Error(\"The header of an OSC packet didn't contain an OSC address or a #bundle string.\" +\n            \" Header was: \" + header);\n    };\n\n    /**\n     * Writes an OSC packet, which may consist of either of a bundle or a message.\n     *\n     * @param {Object} a bundle or message object\n     * @param {Object} [options] write options\n     * @return {Uint8Array} an array of bytes containing the message\n     */\n    osc.writePacket = function (packet, options) {\n        if (osc.isValidMessage(packet)) {\n            return osc.writeMessage(packet, options);\n        } else if (osc.isValidBundle(packet)) {\n            return osc.writeBundle(packet, options);\n        } else {\n            throw new Error(\"The specified packet was not recognized as a valid OSC message or bundle.\" +\n                \" Packet was: \" + JSON.stringify(packet, null, 2));\n        }\n    };\n\n    // Unsupported, non-API.\n    osc.argumentTypes = {\n        i: {\n            reader: \"readInt32\",\n            writer: \"writeInt32\"\n        },\n        h: {\n            reader: \"readInt64\",\n            writer: \"writeInt64\"\n        },\n        f: {\n            reader: \"readFloat32\",\n            writer: \"writeFloat32\"\n        },\n        s: {\n            reader: \"readString\",\n            writer: \"writeString\"\n        },\n        S: {\n            reader: \"readString\",\n            writer: \"writeString\"\n        },\n        b: {\n            reader: \"readBlob\",\n            writer: \"writeBlob\"\n        },\n        t: {\n            reader: \"readTimeTag\",\n            writer: \"writeTimeTag\"\n        },\n        T: {\n            reader: \"readTrue\"\n        },\n        F: {\n            reader: \"readFalse\"\n        },\n        N: {\n            reader: \"readNull\"\n        },\n        I: {\n            reader: \"readImpulse\"\n        },\n        d: {\n            reader: \"readFloat64\",\n            writer: \"writeFloat64\"\n        },\n        c: {\n            reader: \"readChar32\",\n            writer: \"writeChar32\"\n        },\n        r: {\n            reader: \"readColor\",\n            writer: \"writeColor\"\n        },\n        m: {\n            reader: \"readMIDIBytes\",\n            writer: \"writeMIDIBytes\"\n        },\n        // [] are special cased within read/writeArguments()\n    };\n\n    // Unsupported, non-API function.\n    osc.inferTypeForArgument = function (arg) {\n        var type = typeof arg;\n\n        // TODO: This is freaking hideous.\n        switch (type) {\n            case \"boolean\":\n                return arg ? \"T\" : \"F\";\n            case \"string\":\n                return \"s\";\n            case \"number\":\n                return \"f\";\n            case \"undefined\":\n                return \"N\";\n            case \"object\":\n                if (arg === null) {\n                    return \"N\";\n                } else if (arg instanceof Uint8Array ||\n                    arg instanceof ArrayBuffer) {\n                    return \"b\";\n                } else if (typeof arg.high === \"number\" && typeof arg.low === \"number\") {\n                    return \"h\";\n                }\n                break;\n        }\n\n        throw new Error(\"Can't infer OSC argument type for value: \" +\n            JSON.stringify(arg, null, 2));\n    };\n\n    // Unsupported, non-API function.\n    osc.annotateArguments = function (args) {\n        var annotated = [];\n\n        for (var i = 0; i < args.length; i++) {\n            var arg = args[i],\n                msgArg;\n\n            if (typeof (arg) === \"object\" && arg.type && arg.value !== undefined) {\n                // We've got an explicitly typed argument.\n                msgArg = arg;\n            } else if (osc.isArray(arg)) {\n                // We've got an array of arguments,\n                // so they each need to be inferred and expanded.\n                msgArg = osc.annotateArguments(arg);\n            } else {\n                var oscType = osc.inferTypeForArgument(arg);\n                msgArg = {\n                    type: oscType,\n                    value: arg\n                };\n            }\n\n            annotated.push(msgArg);\n        }\n\n        return annotated;\n    };\n\n    if (osc.isCommonJS) {\n        module.exports = osc;\n    }\n}());\n;\n!function(t,i){ true?module.exports=i():undefined}(\"undefined\"!=typeof self?self:this,function(){return function(t){function i(e){if(n[e])return n[e].exports;var r=n[e]={i:e,l:!1,exports:{}};return t[e].call(r.exports,r,r.exports,i),r.l=!0,r.exports}var n={};return i.m=t,i.c=n,i.d=function(t,n,e){i.o(t,n)||Object.defineProperty(t,n,{configurable:!1,enumerable:!0,get:e})},i.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(n,\"a\",n),n},i.o=function(t,i){return Object.prototype.hasOwnProperty.call(t,i)},i.p=\"\",i(i.s=0)}([function(t,i){function n(t,i,n){this.low=0|t,this.high=0|i,this.unsigned=!!n}function e(t){return!0===(t&&t.__isLong__)}function r(t,i){var n,e,r;return i?(t>>>=0,(r=0<=t&&t<256)&&(e=l[t])?e:(n=h(t,(0|t)<0?-1:0,!0),r&&(l[t]=n),n)):(t|=0,(r=-128<=t&&t<128)&&(e=f[t])?e:(n=h(t,t<0?-1:0,!1),r&&(f[t]=n),n))}function s(t,i){if(isNaN(t))return i?p:m;if(i){if(t<0)return p;if(t>=c)return q}else{if(t<=-v)return _;if(t+1>=v)return E}return t<0?s(-t,i).neg():h(t%d|0,t/d|0,i)}function h(t,i,e){return new n(t,i,e)}function u(t,i,n){if(0===t.length)throw Error(\"empty string\");if(\"NaN\"===t||\"Infinity\"===t||\"+Infinity\"===t||\"-Infinity\"===t)return m;if(\"number\"==typeof i?(n=i,i=!1):i=!!i,(n=n||10)<2||36<n)throw RangeError(\"radix\");var e;if((e=t.indexOf(\"-\"))>0)throw Error(\"interior hyphen\");if(0===e)return u(t.substring(1),i,n).neg();for(var r=s(a(n,8)),h=m,o=0;o<t.length;o+=8){var g=Math.min(8,t.length-o),f=parseInt(t.substring(o,o+g),n);if(g<8){var l=s(a(n,g));h=h.mul(l).add(s(f))}else h=h.mul(r),h=h.add(s(f))}return h.unsigned=i,h}function o(t,i){return\"number\"==typeof t?s(t,i):\"string\"==typeof t?u(t,i):h(t.low,t.high,\"boolean\"==typeof i?i:t.unsigned)}t.exports=n;var g=null;try{g=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch(t){}n.prototype.__isLong__,Object.defineProperty(n.prototype,\"__isLong__\",{value:!0}),n.isLong=e;var f={},l={};n.fromInt=r,n.fromNumber=s,n.fromBits=h;var a=Math.pow;n.fromString=u,n.fromValue=o;var d=4294967296,c=d*d,v=c/2,w=r(1<<24),m=r(0);n.ZERO=m;var p=r(0,!0);n.UZERO=p;var y=r(1);n.ONE=y;var b=r(1,!0);n.UONE=b;var N=r(-1);n.NEG_ONE=N;var E=h(-1,2147483647,!1);n.MAX_VALUE=E;var q=h(-1,-1,!0);n.MAX_UNSIGNED_VALUE=q;var _=h(0,-2147483648,!1);n.MIN_VALUE=_;var B=n.prototype;B.toInt=function(){return this.unsigned?this.low>>>0:this.low},B.toNumber=function(){return this.unsigned?(this.high>>>0)*d+(this.low>>>0):this.high*d+(this.low>>>0)},B.toString=function(t){if((t=t||10)<2||36<t)throw RangeError(\"radix\");if(this.isZero())return\"0\";if(this.isNegative()){if(this.eq(_)){var i=s(t),n=this.div(i),e=n.mul(i).sub(this);return n.toString(t)+e.toInt().toString(t)}return\"-\"+this.neg().toString(t)}for(var r=s(a(t,6),this.unsigned),h=this,u=\"\";;){var o=h.div(r),g=h.sub(o.mul(r)).toInt()>>>0,f=g.toString(t);if(h=o,h.isZero())return f+u;for(;f.length<6;)f=\"0\"+f;u=\"\"+f+u}},B.getHighBits=function(){return this.high},B.getHighBitsUnsigned=function(){return this.high>>>0},B.getLowBits=function(){return this.low},B.getLowBitsUnsigned=function(){return this.low>>>0},B.getNumBitsAbs=function(){if(this.isNegative())return this.eq(_)?64:this.neg().getNumBitsAbs();for(var t=0!=this.high?this.high:this.low,i=31;i>0&&0==(t&1<<i);i--);return 0!=this.high?i+33:i+1},B.isZero=function(){return 0===this.high&&0===this.low},B.eqz=B.isZero,B.isNegative=function(){return!this.unsigned&&this.high<0},B.isPositive=function(){return this.unsigned||this.high>=0},B.isOdd=function(){return 1==(1&this.low)},B.isEven=function(){return 0==(1&this.low)},B.equals=function(t){return e(t)||(t=o(t)),(this.unsigned===t.unsigned||this.high>>>31!=1||t.high>>>31!=1)&&(this.high===t.high&&this.low===t.low)},B.eq=B.equals,B.notEquals=function(t){return!this.eq(t)},B.neq=B.notEquals,B.ne=B.notEquals,B.lessThan=function(t){return this.comp(t)<0},B.lt=B.lessThan,B.lessThanOrEqual=function(t){return this.comp(t)<=0},B.lte=B.lessThanOrEqual,B.le=B.lessThanOrEqual,B.greaterThan=function(t){return this.comp(t)>0},B.gt=B.greaterThan,B.greaterThanOrEqual=function(t){return this.comp(t)>=0},B.gte=B.greaterThanOrEqual,B.ge=B.greaterThanOrEqual,B.compare=function(t){if(e(t)||(t=o(t)),this.eq(t))return 0;var i=this.isNegative(),n=t.isNegative();return i&&!n?-1:!i&&n?1:this.unsigned?t.high>>>0>this.high>>>0||t.high===this.high&&t.low>>>0>this.low>>>0?-1:1:this.sub(t).isNegative()?-1:1},B.comp=B.compare,B.negate=function(){return!this.unsigned&&this.eq(_)?_:this.not().add(y)},B.neg=B.negate,B.add=function(t){e(t)||(t=o(t));var i=this.high>>>16,n=65535&this.high,r=this.low>>>16,s=65535&this.low,u=t.high>>>16,g=65535&t.high,f=t.low>>>16,l=65535&t.low,a=0,d=0,c=0,v=0;return v+=s+l,c+=v>>>16,v&=65535,c+=r+f,d+=c>>>16,c&=65535,d+=n+g,a+=d>>>16,d&=65535,a+=i+u,a&=65535,h(c<<16|v,a<<16|d,this.unsigned)},B.subtract=function(t){return e(t)||(t=o(t)),this.add(t.neg())},B.sub=B.subtract,B.multiply=function(t){if(this.isZero())return m;if(e(t)||(t=o(t)),g){return h(g.mul(this.low,this.high,t.low,t.high),g.get_high(),this.unsigned)}if(t.isZero())return m;if(this.eq(_))return t.isOdd()?_:m;if(t.eq(_))return this.isOdd()?_:m;if(this.isNegative())return t.isNegative()?this.neg().mul(t.neg()):this.neg().mul(t).neg();if(t.isNegative())return this.mul(t.neg()).neg();if(this.lt(w)&&t.lt(w))return s(this.toNumber()*t.toNumber(),this.unsigned);var i=this.high>>>16,n=65535&this.high,r=this.low>>>16,u=65535&this.low,f=t.high>>>16,l=65535&t.high,a=t.low>>>16,d=65535&t.low,c=0,v=0,p=0,y=0;return y+=u*d,p+=y>>>16,y&=65535,p+=r*d,v+=p>>>16,p&=65535,p+=u*a,v+=p>>>16,p&=65535,v+=n*d,c+=v>>>16,v&=65535,v+=r*a,c+=v>>>16,v&=65535,v+=u*l,c+=v>>>16,v&=65535,c+=i*d+n*a+r*l+u*f,c&=65535,h(p<<16|y,c<<16|v,this.unsigned)},B.mul=B.multiply,B.divide=function(t){if(e(t)||(t=o(t)),t.isZero())throw Error(\"division by zero\");if(g){if(!this.unsigned&&-2147483648===this.high&&-1===t.low&&-1===t.high)return this;return h((this.unsigned?g.div_u:g.div_s)(this.low,this.high,t.low,t.high),g.get_high(),this.unsigned)}if(this.isZero())return this.unsigned?p:m;var i,n,r;if(this.unsigned){if(t.unsigned||(t=t.toUnsigned()),t.gt(this))return p;if(t.gt(this.shru(1)))return b;r=p}else{if(this.eq(_)){if(t.eq(y)||t.eq(N))return _;if(t.eq(_))return y;return i=this.shr(1).div(t).shl(1),i.eq(m)?t.isNegative()?y:N:(n=this.sub(t.mul(i)),r=i.add(n.div(t)))}if(t.eq(_))return this.unsigned?p:m;if(this.isNegative())return t.isNegative()?this.neg().div(t.neg()):this.neg().div(t).neg();if(t.isNegative())return this.div(t.neg()).neg();r=m}for(n=this;n.gte(t);){i=Math.max(1,Math.floor(n.toNumber()/t.toNumber()));for(var u=Math.ceil(Math.log(i)/Math.LN2),f=u<=48?1:a(2,u-48),l=s(i),d=l.mul(t);d.isNegative()||d.gt(n);)i-=f,l=s(i,this.unsigned),d=l.mul(t);l.isZero()&&(l=y),r=r.add(l),n=n.sub(d)}return r},B.div=B.divide,B.modulo=function(t){if(e(t)||(t=o(t)),g){return h((this.unsigned?g.rem_u:g.rem_s)(this.low,this.high,t.low,t.high),g.get_high(),this.unsigned)}return this.sub(this.div(t).mul(t))},B.mod=B.modulo,B.rem=B.modulo,B.not=function(){return h(~this.low,~this.high,this.unsigned)},B.and=function(t){return e(t)||(t=o(t)),h(this.low&t.low,this.high&t.high,this.unsigned)},B.or=function(t){return e(t)||(t=o(t)),h(this.low|t.low,this.high|t.high,this.unsigned)},B.xor=function(t){return e(t)||(t=o(t)),h(this.low^t.low,this.high^t.high,this.unsigned)},B.shiftLeft=function(t){return e(t)&&(t=t.toInt()),0==(t&=63)?this:t<32?h(this.low<<t,this.high<<t|this.low>>>32-t,this.unsigned):h(0,this.low<<t-32,this.unsigned)},B.shl=B.shiftLeft,B.shiftRight=function(t){return e(t)&&(t=t.toInt()),0==(t&=63)?this:t<32?h(this.low>>>t|this.high<<32-t,this.high>>t,this.unsigned):h(this.high>>t-32,this.high>=0?0:-1,this.unsigned)},B.shr=B.shiftRight,B.shiftRightUnsigned=function(t){if(e(t)&&(t=t.toInt()),0===(t&=63))return this;var i=this.high;if(t<32){return h(this.low>>>t|i<<32-t,i>>>t,this.unsigned)}return 32===t?h(i,0,this.unsigned):h(i>>>t-32,0,this.unsigned)},B.shru=B.shiftRightUnsigned,B.shr_u=B.shiftRightUnsigned,B.toSigned=function(){return this.unsigned?h(this.low,this.high,!1):this},B.toUnsigned=function(){return this.unsigned?this:h(this.low,this.high,!0)},B.toBytes=function(t){return t?this.toBytesLE():this.toBytesBE()},B.toBytesLE=function(){var t=this.high,i=this.low;return[255&i,i>>>8&255,i>>>16&255,i>>>24,255&t,t>>>8&255,t>>>16&255,t>>>24]},B.toBytesBE=function(){var t=this.high,i=this.low;return[t>>>24,t>>>16&255,t>>>8&255,255&t,i>>>24,i>>>16&255,i>>>8&255,255&i]},n.fromBytes=function(t,i,e){return e?n.fromBytesLE(t,i):n.fromBytesBE(t,i)},n.fromBytesLE=function(t,i){return new n(t[0]|t[1]<<8|t[2]<<16|t[3]<<24,t[4]|t[5]<<8|t[6]<<16|t[7]<<24,i)},n.fromBytesBE=function(t,i){return new n(t[4]<<24|t[5]<<16|t[6]<<8|t[7],t[0]<<24|t[1]<<16|t[2]<<8|t[3],i)}}])});\n//# sourceMappingURL=long.js.map;\n/*\n * slip.js: A plain JavaScript SLIP implementation that works in both the browser and Node.js\n *\n * Copyright 2014, Colin Clark\n * Licensed under the MIT and GPL 3 licenses.\n */\n\n/*global exports, define*/\n(function (root, factory) {\n    \"use strict\";\n\n    if (true) {\n        // We're in a CommonJS-style loader.\n        root.slip = exports;\n        factory(exports);\n    } else {}\n}(this, function (exports) {\n\n    \"use strict\";\n\n    var slip = exports;\n\n    slip.END = 192;\n    slip.ESC = 219;\n    slip.ESC_END = 220;\n    slip.ESC_ESC = 221;\n\n    slip.byteArray = function (data, offset, length) {\n        return data instanceof ArrayBuffer ? new Uint8Array(data, offset, length) : data;\n    };\n\n    slip.expandByteArray = function (arr) {\n        var expanded = new Uint8Array(arr.length * 2);\n        expanded.set(arr);\n\n        return expanded;\n    };\n\n    slip.sliceByteArray = function (arr, start, end) {\n        var sliced = arr.buffer.slice ? arr.buffer.slice(start, end) : arr.subarray(start, end);\n        return new Uint8Array(sliced);\n    };\n\n    /**\n     * SLIP encodes a byte array.\n     *\n     * @param {Array-like} data a Uint8Array, Node.js Buffer, ArrayBuffer, or [] containing raw bytes\n     * @param {Object} options encoder options\n     * @return {Uint8Array} the encoded copy of the data\n     */\n    slip.encode = function (data, o) {\n        o = o || {};\n        o.bufferPadding = o.bufferPadding || 4; // Will be rounded to the nearest 4 bytes.\n        data = slip.byteArray(data, o.offset, o.byteLength);\n\n        var bufLen = (data.length + o.bufferPadding + 3) & ~0x03,\n            encoded = new Uint8Array(bufLen),\n            j = 1;\n\n        encoded[0] = slip.END;\n\n        for (var i = 0; i < data.length; i++) {\n            // We always need enough space for two value bytes plus a trailing END.\n            if (j > encoded.length - 3) {\n                encoded = slip.expandByteArray(encoded);\n            }\n\n            var val = data[i];\n            if (val === slip.END) {\n                encoded[j++] = slip.ESC;\n                val = slip.ESC_END;\n            } else if (val === slip.ESC) {\n                encoded[j++] = slip.ESC;\n                val = slip.ESC_ESC;\n            }\n\n            encoded[j++] = val;\n        }\n\n        encoded[j] = slip.END;\n        return slip.sliceByteArray(encoded, 0, j + 1);\n    };\n\n    /**\n     * Creates a new SLIP Decoder.\n     * @constructor\n     *\n     * @param {Function} onMessage a callback function that will be invoked when a message has been fully decoded\n     * @param {Number} maxBufferSize the maximum size of a incoming message; larger messages will throw an error\n     */\n    slip.Decoder = function (o) {\n        o = typeof o !== \"function\" ? o || {} : {\n            onMessage: o\n        };\n\n        this.maxMessageSize = o.maxMessageSize || 10485760; // Defaults to 10 MB.\n        this.bufferSize = o.bufferSize || 1024; // Message buffer defaults to 1 KB.\n        this.msgBuffer = new Uint8Array(this.bufferSize);\n        this.msgBufferIdx = 0;\n        this.onMessage = o.onMessage;\n        this.onError = o.onError;\n        this.escape = false;\n    };\n\n    var p = slip.Decoder.prototype;\n\n    /**\n     * Decodes a SLIP data packet.\n     * The onMessage callback will be invoked when a complete message has been decoded.\n     *\n     * @param {Array-like} data an incoming stream of bytes\n     */\n    p.decode = function (data) {\n        data = slip.byteArray(data);\n\n        var msg;\n        for (var i = 0; i < data.length; i++) {\n            var val = data[i];\n\n            if (this.escape) {\n                if (val === slip.ESC_ESC) {\n                    val = slip.ESC;\n                } else if (val === slip.ESC_END) {\n                    val = slip.END;\n                }\n            } else {\n                if (val === slip.ESC) {\n                    this.escape = true;\n                    continue;\n                }\n\n                if (val === slip.END) {\n                    msg = this.handleEnd();\n                    continue;\n                }\n            }\n\n            var more = this.addByte(val);\n            if (!more) {\n                this.handleMessageMaxError();\n            }\n        }\n\n        return msg;\n    };\n\n    p.handleMessageMaxError = function () {\n        if (this.onError) {\n            this.onError(this.msgBuffer.subarray(0),\n                \"The message is too large; the maximum message size is \" +\n                this.maxMessageSize / 1024 + \"KB. Use a larger maxMessageSize if necessary.\");\n        }\n\n        // Reset everything and carry on.\n        this.msgBufferIdx = 0;\n        this.escape = false;\n    };\n\n    // Unsupported, non-API method.\n    p.addByte = function (val) {\n        if (this.msgBufferIdx > this.msgBuffer.length - 1) {\n            this.msgBuffer = slip.expandByteArray(this.msgBuffer);\n        }\n\n        this.msgBuffer[this.msgBufferIdx++] = val;\n        this.escape = false;\n\n        return this.msgBuffer.length < this.maxMessageSize;\n    };\n\n    // Unsupported, non-API method.\n    p.handleEnd = function () {\n        if (this.msgBufferIdx === 0) {\n            return; // Toss opening END byte and carry on.\n        }\n\n        var msg = slip.sliceByteArray(this.msgBuffer, 0, this.msgBufferIdx);\n        if (this.onMessage) {\n            this.onMessage(msg);\n        }\n\n        // Clear our pointer into the message buffer.\n        this.msgBufferIdx = 0;\n\n        return msg;\n    };\n\n    return slip;\n}));\n;\n/*!\n * EventEmitter v5.2.5 - git.io/ee\n * Unlicense - http://unlicense.org/\n * Oliver Caldwell - http://oli.me.uk/\n * @preserve\n */\n\n;(function (exports) {\n    'use strict';\n\n    /**\n     * Class for managing events.\n     * Can be extended to provide event functionality in other classes.\n     *\n     * @class EventEmitter Manages event registering and emitting.\n     */\n    function EventEmitter() {}\n\n    // Shortcuts to improve speed and size\n    var proto = EventEmitter.prototype;\n    var originalGlobalValue = exports.EventEmitter;\n\n    /**\n     * Finds the index of the listener for the event in its storage array.\n     *\n     * @param {Function[]} listeners Array of listeners to search through.\n     * @param {Function} listener Method to look for.\n     * @return {Number} Index of the specified listener, -1 if not found\n     * @api private\n     */\n    function indexOfListener(listeners, listener) {\n        var i = listeners.length;\n        while (i--) {\n            if (listeners[i].listener === listener) {\n                return i;\n            }\n        }\n\n        return -1;\n    }\n\n    /**\n     * Alias a method while keeping the context correct, to allow for overwriting of target method.\n     *\n     * @param {String} name The name of the target method.\n     * @return {Function} The aliased method\n     * @api private\n     */\n    function alias(name) {\n        return function aliasClosure() {\n            return this[name].apply(this, arguments);\n        };\n    }\n\n    /**\n     * Returns the listener array for the specified event.\n     * Will initialise the event object and listener arrays if required.\n     * Will return an object if you use a regex search. The object contains keys for each matched event. So /ba[rz]/ might return an object containing bar and baz. But only if you have either defined them with defineEvent or added some listeners to them.\n     * Each property in the object response is an array of listener functions.\n     *\n     * @param {String|RegExp} evt Name of the event to return the listeners from.\n     * @return {Function[]|Object} All listener functions for the event.\n     */\n    proto.getListeners = function getListeners(evt) {\n        var events = this._getEvents();\n        var response;\n        var key;\n\n        // Return a concatenated array of all matching events if\n        // the selector is a regular expression.\n        if (evt instanceof RegExp) {\n            response = {};\n            for (key in events) {\n                if (events.hasOwnProperty(key) && evt.test(key)) {\n                    response[key] = events[key];\n                }\n            }\n        }\n        else {\n            response = events[evt] || (events[evt] = []);\n        }\n\n        return response;\n    };\n\n    /**\n     * Takes a list of listener objects and flattens it into a list of listener functions.\n     *\n     * @param {Object[]} listeners Raw listener objects.\n     * @return {Function[]} Just the listener functions.\n     */\n    proto.flattenListeners = function flattenListeners(listeners) {\n        var flatListeners = [];\n        var i;\n\n        for (i = 0; i < listeners.length; i += 1) {\n            flatListeners.push(listeners[i].listener);\n        }\n\n        return flatListeners;\n    };\n\n    /**\n     * Fetches the requested listeners via getListeners but will always return the results inside an object. This is mainly for internal use but others may find it useful.\n     *\n     * @param {String|RegExp} evt Name of the event to return the listeners from.\n     * @return {Object} All listener functions for an event in an object.\n     */\n    proto.getListenersAsObject = function getListenersAsObject(evt) {\n        var listeners = this.getListeners(evt);\n        var response;\n\n        if (listeners instanceof Array) {\n            response = {};\n            response[evt] = listeners;\n        }\n\n        return response || listeners;\n    };\n\n    function isValidListener (listener) {\n        if (typeof listener === 'function' || listener instanceof RegExp) {\n            return true\n        } else if (listener && typeof listener === 'object') {\n            return isValidListener(listener.listener)\n        } else {\n            return false\n        }\n    }\n\n    /**\n     * Adds a listener function to the specified event.\n     * The listener will not be added if it is a duplicate.\n     * If the listener returns true then it will be removed after it is called.\n     * If you pass a regular expression as the event name then the listener will be added to all events that match it.\n     *\n     * @param {String|RegExp} evt Name of the event to attach the listener to.\n     * @param {Function} listener Method to be called when the event is emitted. If the function returns true then it will be removed after calling.\n     * @return {Object} Current instance of EventEmitter for chaining.\n     */\n    proto.addListener = function addListener(evt, listener) {\n        if (!isValidListener(listener)) {\n            throw new TypeError('listener must be a function');\n        }\n\n        var listeners = this.getListenersAsObject(evt);\n        var listenerIsWrapped = typeof listener === 'object';\n        var key;\n\n        for (key in listeners) {\n            if (listeners.hasOwnProperty(key) && indexOfListener(listeners[key], listener) === -1) {\n                listeners[key].push(listenerIsWrapped ? listener : {\n                    listener: listener,\n                    once: false\n                });\n            }\n        }\n\n        return this;\n    };\n\n    /**\n     * Alias of addListener\n     */\n    proto.on = alias('addListener');\n\n    /**\n     * Semi-alias of addListener. It will add a listener that will be\n     * automatically removed after its first execution.\n     *\n     * @param {String|RegExp} evt Name of the event to attach the listener to.\n     * @param {Function} listener Method to be called when the event is emitted. If the function returns true then it will be removed after calling.\n     * @return {Object} Current instance of EventEmitter for chaining.\n     */\n    proto.addOnceListener = function addOnceListener(evt, listener) {\n        return this.addListener(evt, {\n            listener: listener,\n            once: true\n        });\n    };\n\n    /**\n     * Alias of addOnceListener.\n     */\n    proto.once = alias('addOnceListener');\n\n    /**\n     * Defines an event name. This is required if you want to use a regex to add a listener to multiple events at once. If you don't do this then how do you expect it to know what event to add to? Should it just add to every possible match for a regex? No. That is scary and bad.\n     * You need to tell it what event names should be matched by a regex.\n     *\n     * @param {String} evt Name of the event to create.\n     * @return {Object} Current instance of EventEmitter for chaining.\n     */\n    proto.defineEvent = function defineEvent(evt) {\n        this.getListeners(evt);\n        return this;\n    };\n\n    /**\n     * Uses defineEvent to define multiple events.\n     *\n     * @param {String[]} evts An array of event names to define.\n     * @return {Object} Current instance of EventEmitter for chaining.\n     */\n    proto.defineEvents = function defineEvents(evts) {\n        for (var i = 0; i < evts.length; i += 1) {\n            this.defineEvent(evts[i]);\n        }\n        return this;\n    };\n\n    /**\n     * Removes a listener function from the specified event.\n     * When passed a regular expression as the event name, it will remove the listener from all events that match it.\n     *\n     * @param {String|RegExp} evt Name of the event to remove the listener from.\n     * @param {Function} listener Method to remove from the event.\n     * @return {Object} Current instance of EventEmitter for chaining.\n     */\n    proto.removeListener = function removeListener(evt, listener) {\n        var listeners = this.getListenersAsObject(evt);\n        var index;\n        var key;\n\n        for (key in listeners) {\n            if (listeners.hasOwnProperty(key)) {\n                index = indexOfListener(listeners[key], listener);\n\n                if (index !== -1) {\n                    listeners[key].splice(index, 1);\n                }\n            }\n        }\n\n        return this;\n    };\n\n    /**\n     * Alias of removeListener\n     */\n    proto.off = alias('removeListener');\n\n    /**\n     * Adds listeners in bulk using the manipulateListeners method.\n     * If you pass an object as the first argument you can add to multiple events at once. The object should contain key value pairs of events and listeners or listener arrays. You can also pass it an event name and an array of listeners to be added.\n     * You can also pass it a regular expression to add the array of listeners to all events that match it.\n     * Yeah, this function does quite a bit. That's probably a bad thing.\n     *\n     * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to add to multiple events at once.\n     * @param {Function[]} [listeners] An optional array of listener functions to add.\n     * @return {Object} Current instance of EventEmitter for chaining.\n     */\n    proto.addListeners = function addListeners(evt, listeners) {\n        // Pass through to manipulateListeners\n        return this.manipulateListeners(false, evt, listeners);\n    };\n\n    /**\n     * Removes listeners in bulk using the manipulateListeners method.\n     * If you pass an object as the first argument you can remove from multiple events at once. The object should contain key value pairs of events and listeners or listener arrays.\n     * You can also pass it an event name and an array of listeners to be removed.\n     * You can also pass it a regular expression to remove the listeners from all events that match it.\n     *\n     * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to remove from multiple events at once.\n     * @param {Function[]} [listeners] An optional array of listener functions to remove.\n     * @return {Object} Current instance of EventEmitter for chaining.\n     */\n    proto.removeListeners = function removeListeners(evt, listeners) {\n        // Pass through to manipulateListeners\n        return this.manipulateListeners(true, evt, listeners);\n    };\n\n    /**\n     * Edits listeners in bulk. The addListeners and removeListeners methods both use this to do their job. You should really use those instead, this is a little lower level.\n     * The first argument will determine if the listeners are removed (true) or added (false).\n     * If you pass an object as the second argument you can add/remove from multiple events at once. The object should contain key value pairs of events and listeners or listener arrays.\n     * You can also pass it an event name and an array of listeners to be added/removed.\n     * You can also pass it a regular expression to manipulate the listeners of all events that match it.\n     *\n     * @param {Boolean} remove True if you want to remove listeners, false if you want to add.\n     * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to add/remove from multiple events at once.\n     * @param {Function[]} [listeners] An optional array of listener functions to add/remove.\n     * @return {Object} Current instance of EventEmitter for chaining.\n     */\n    proto.manipulateListeners = function manipulateListeners(remove, evt, listeners) {\n        var i;\n        var value;\n        var single = remove ? this.removeListener : this.addListener;\n        var multiple = remove ? this.removeListeners : this.addListeners;\n\n        // If evt is an object then pass each of its properties to this method\n        if (typeof evt === 'object' && !(evt instanceof RegExp)) {\n            for (i in evt) {\n                if (evt.hasOwnProperty(i) && (value = evt[i])) {\n                    // Pass the single listener straight through to the singular method\n                    if (typeof value === 'function') {\n                        single.call(this, i, value);\n                    }\n                    else {\n                        // Otherwise pass back to the multiple function\n                        multiple.call(this, i, value);\n                    }\n                }\n            }\n        }\n        else {\n            // So evt must be a string\n            // And listeners must be an array of listeners\n            // Loop over it and pass each one to the multiple method\n            i = listeners.length;\n            while (i--) {\n                single.call(this, evt, listeners[i]);\n            }\n        }\n\n        return this;\n    };\n\n    /**\n     * Removes all listeners from a specified event.\n     * If you do not specify an event then all listeners will be removed.\n     * That means every event will be emptied.\n     * You can also pass a regex to remove all events that match it.\n     *\n     * @param {String|RegExp} [evt] Optional name of the event to remove all listeners for. Will remove from every event if not passed.\n     * @return {Object} Current instance of EventEmitter for chaining.\n     */\n    proto.removeEvent = function removeEvent(evt) {\n        var type = typeof evt;\n        var events = this._getEvents();\n        var key;\n\n        // Remove different things depending on the state of evt\n        if (type === 'string') {\n            // Remove all listeners for the specified event\n            delete events[evt];\n        }\n        else if (evt instanceof RegExp) {\n            // Remove all events matching the regex.\n            for (key in events) {\n                if (events.hasOwnProperty(key) && evt.test(key)) {\n                    delete events[key];\n                }\n            }\n        }\n        else {\n            // Remove all listeners in all events\n            delete this._events;\n        }\n\n        return this;\n    };\n\n    /**\n     * Alias of removeEvent.\n     *\n     * Added to mirror the node API.\n     */\n    proto.removeAllListeners = alias('removeEvent');\n\n    /**\n     * Emits an event of your choice.\n     * When emitted, every listener attached to that event will be executed.\n     * If you pass the optional argument array then those arguments will be passed to every listener upon execution.\n     * Because it uses `apply`, your array of arguments will be passed as if you wrote them out separately.\n     * So they will not arrive within the array on the other side, they will be separate.\n     * You can also pass a regular expression to emit to all events that match it.\n     *\n     * @param {String|RegExp} evt Name of the event to emit and execute listeners for.\n     * @param {Array} [args] Optional array of arguments to be passed to each listener.\n     * @return {Object} Current instance of EventEmitter for chaining.\n     */\n    proto.emitEvent = function emitEvent(evt, args) {\n        var listenersMap = this.getListenersAsObject(evt);\n        var listeners;\n        var listener;\n        var i;\n        var key;\n        var response;\n\n        for (key in listenersMap) {\n            if (listenersMap.hasOwnProperty(key)) {\n                listeners = listenersMap[key].slice(0);\n\n                for (i = 0; i < listeners.length; i++) {\n                    // If the listener returns true then it shall be removed from the event\n                    // The function is executed either with a basic call or an apply if there is an args array\n                    listener = listeners[i];\n\n                    if (listener.once === true) {\n                        this.removeListener(evt, listener.listener);\n                    }\n\n                    response = listener.listener.apply(this, args || []);\n\n                    if (response === this._getOnceReturnValue()) {\n                        this.removeListener(evt, listener.listener);\n                    }\n                }\n            }\n        }\n\n        return this;\n    };\n\n    /**\n     * Alias of emitEvent\n     */\n    proto.trigger = alias('emitEvent');\n\n    /**\n     * Subtly different from emitEvent in that it will pass its arguments on to the listeners, as opposed to taking a single array of arguments to pass on.\n     * As with emitEvent, you can pass a regex in place of the event name to emit to all events that match it.\n     *\n     * @param {String|RegExp} evt Name of the event to emit and execute listeners for.\n     * @param {...*} Optional additional arguments to be passed to each listener.\n     * @return {Object} Current instance of EventEmitter for chaining.\n     */\n    proto.emit = function emit(evt) {\n        var args = Array.prototype.slice.call(arguments, 1);\n        return this.emitEvent(evt, args);\n    };\n\n    /**\n     * Sets the current value to check against when executing listeners. If a\n     * listeners return value matches the one set here then it will be removed\n     * after execution. This value defaults to true.\n     *\n     * @param {*} value The new value to check for when executing listeners.\n     * @return {Object} Current instance of EventEmitter for chaining.\n     */\n    proto.setOnceReturnValue = function setOnceReturnValue(value) {\n        this._onceReturnValue = value;\n        return this;\n    };\n\n    /**\n     * Fetches the current value to check against when executing listeners. If\n     * the listeners return value matches this one then it should be removed\n     * automatically. It will return true by default.\n     *\n     * @return {*|Boolean} The current value to check for or the default, true.\n     * @api private\n     */\n    proto._getOnceReturnValue = function _getOnceReturnValue() {\n        if (this.hasOwnProperty('_onceReturnValue')) {\n            return this._onceReturnValue;\n        }\n        else {\n            return true;\n        }\n    };\n\n    /**\n     * Fetches the events object and creates one if required.\n     *\n     * @return {Object} The events storage object.\n     * @api private\n     */\n    proto._getEvents = function _getEvents() {\n        return this._events || (this._events = {});\n    };\n\n    /**\n     * Reverts the global {@link EventEmitter} to its previous value and returns a reference to this version.\n     *\n     * @return {Function} Non conflicting EventEmitter class.\n     */\n    EventEmitter.noConflict = function noConflict() {\n        exports.EventEmitter = originalGlobalValue;\n        return EventEmitter;\n    };\n\n    // Expose the class either via AMD, CommonJS or the global object\n    if (true) {\n        !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n            return EventEmitter;\n        }).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    }\n    else {}\n}(typeof window !== 'undefined' ? window : this || {}));\n;\n/*\n * osc.js: An Open Sound Control library for JavaScript that works in both the browser and Node.js\n *\n * Cross-platform base transport library for osc.js.\n *\n * Copyright 2014-2016, Colin Clark\n * Licensed under the MIT and GPL 3 licenses.\n */\n\n/* global require, module */\n\nvar osc = osc || __webpack_require__(/*! ./osc.js */ \"./node_modules/osc/dist/osc.js\"),\n    slip = slip || __webpack_require__(/*! slip */ \"./node_modules/slip/src/slip.js\"),\n    EventEmitter = EventEmitter || __webpack_require__(/*! events */ \"./node_modules/events/events.js\").EventEmitter;\n\n(function () {\n\n    \"use strict\";\n\n    // Unsupported, non-API function.\n    osc.firePacketEvents = function (port, packet, timeTag, packetInfo) {\n        if (packet.address) {\n            port.emit(\"message\", packet, timeTag, packetInfo);\n        } else {\n            osc.fireBundleEvents(port, packet, timeTag, packetInfo);\n        }\n    };\n\n    // Unsupported, non-API function.\n    osc.fireBundleEvents = function (port, bundle, timeTag, packetInfo) {\n        port.emit(\"bundle\", bundle, timeTag, packetInfo);\n        for (var i = 0; i < bundle.packets.length; i++) {\n            var packet = bundle.packets[i];\n            osc.firePacketEvents(port, packet, bundle.timeTag, packetInfo);\n        }\n    };\n\n    osc.fireClosedPortSendError = function (port, msg) {\n        msg = msg || \"Can't send packets on a closed osc.Port object. Please open (or reopen) this Port by calling open().\";\n\n        port.emit(\"error\", msg);\n    };\n\n    osc.Port = function (options) {\n        this.options = options || {};\n        this.on(\"data\", this.decodeOSC.bind(this));\n    };\n\n    var p = osc.Port.prototype = Object.create(EventEmitter.prototype);\n    p.constructor = osc.Port;\n\n    p.send = function (oscPacket) {\n        var args = Array.prototype.slice.call(arguments),\n            encoded = this.encodeOSC(oscPacket),\n            buf = osc.nativeBuffer(encoded);\n\n        args[0] = buf;\n        this.sendRaw.apply(this, args);\n    };\n\n    p.encodeOSC = function (packet) {\n        // TODO gh-39: This is unsafe; we should only access the underlying\n        // buffer within the range of its view.\n        packet = packet.buffer ? packet.buffer : packet;\n        var encoded;\n\n        try {\n            encoded = osc.writePacket(packet, this.options);\n        } catch (err) {\n            this.emit(\"error\", err);\n        }\n\n        return encoded;\n    };\n\n    p.decodeOSC = function (data, packetInfo) {\n        data = osc.byteArray(data);\n        this.emit(\"raw\", data, packetInfo);\n\n        try {\n            var packet = osc.readPacket(data, this.options);\n            this.emit(\"osc\", packet, packetInfo);\n            osc.firePacketEvents(this, packet, undefined, packetInfo);\n        } catch (err) {\n            this.emit(\"error\", err);\n        }\n    };\n\n\n    osc.SLIPPort = function (options) {\n        var that = this;\n        var o = this.options = options || {};\n        o.useSLIP = o.useSLIP === undefined ? true : o.useSLIP;\n\n        this.decoder = new slip.Decoder({\n            onMessage: this.decodeOSC.bind(this),\n            onError: function (err) {\n                that.emit(\"error\", err);\n            }\n        });\n\n        var decodeHandler = o.useSLIP ? this.decodeSLIPData : this.decodeOSC;\n        this.on(\"data\", decodeHandler.bind(this));\n    };\n\n    p = osc.SLIPPort.prototype = Object.create(osc.Port.prototype);\n    p.constructor = osc.SLIPPort;\n\n    p.encodeOSC = function (packet) {\n        // TODO gh-39: This is unsafe; we should only access the underlying\n        // buffer within the range of its view.\n        packet = packet.buffer ? packet.buffer : packet;\n        var framed;\n\n        try {\n            var encoded = osc.writePacket(packet, this.options);\n            framed = slip.encode(encoded);\n        } catch (err) {\n            this.emit(\"error\", err);\n        }\n\n        return framed;\n    };\n\n    p.decodeSLIPData = function (data, packetInfo) {\n        // TODO: Get packetInfo through SLIP decoder.\n        this.decoder.decode(data, packetInfo);\n    };\n\n\n    // Unsupported, non-API function.\n    osc.relay = function (from, to, eventName, sendFnName, transformFn, sendArgs) {\n        eventName = eventName || \"message\";\n        sendFnName = sendFnName || \"send\";\n        transformFn = transformFn || function () {};\n        sendArgs = sendArgs ? [null].concat(sendArgs) : [];\n\n        var listener = function (data) {\n            sendArgs[0] = data;\n            data = transformFn(data);\n            to[sendFnName].apply(to, sendArgs);\n        };\n\n        from.on(eventName, listener);\n\n        return {\n            eventName: eventName,\n            listener: listener\n        };\n    };\n\n    // Unsupported, non-API function.\n    osc.relayPorts = function (from, to, o) {\n        var eventName = o.raw ? \"raw\" : \"osc\",\n            sendFnName = o.raw ? \"sendRaw\" : \"send\";\n\n        return osc.relay(from, to, eventName, sendFnName, o.transform);\n    };\n\n    // Unsupported, non-API function.\n    osc.stopRelaying = function (from, relaySpec) {\n        from.removeListener(relaySpec.eventName, relaySpec.listener);\n    };\n\n\n    /**\n     * A Relay connects two sources of OSC data together,\n     * relaying all OSC messages received by each port to the other.\n     * @constructor\n     *\n     * @param {osc.Port} port1 the first port to relay\n     * @param {osc.Port} port2 the second port to relay\n     * @param {Object} options the configuration options for this relay\n     */\n    osc.Relay = function (port1, port2, options) {\n        var o = this.options = options || {};\n        o.raw = false;\n\n        this.port1 = port1;\n        this.port2 = port2;\n\n        this.listen();\n    };\n\n    p = osc.Relay.prototype = Object.create(EventEmitter.prototype);\n    p.constructor = osc.Relay;\n\n    p.open = function () {\n        this.port1.open();\n        this.port2.open();\n    };\n\n    p.listen = function () {\n        if (this.port1Spec && this.port2Spec) {\n            this.close();\n        }\n\n        this.port1Spec = osc.relayPorts(this.port1, this.port2, this.options);\n        this.port2Spec = osc.relayPorts(this.port2, this.port1, this.options);\n\n        // Bind port close listeners to ensure that the relay\n        // will stop forwarding messages if one of its ports close.\n        // Users are still responsible for closing the underlying ports\n        // if necessary.\n        var closeListener = this.close.bind(this);\n        this.port1.on(\"close\", closeListener);\n        this.port2.on(\"close\", closeListener);\n    };\n\n    p.close = function () {\n        osc.stopRelaying(this.port1, this.port1Spec);\n        osc.stopRelaying(this.port2, this.port2Spec);\n        this.emit(\"close\", this.port1, this.port2);\n    };\n\n\n    // If we're in a require-compatible environment, export ourselves.\n    if ( true && module.exports) {\n        module.exports = osc;\n    }\n}());\n;\n/*\n * osc.js: An Open Sound Control library for JavaScript that works in both the browser and Node.js\n *\n * Cross-Platform Web Socket client transport for osc.js.\n *\n * Copyright 2014-2016, Colin Clark\n * Licensed under the MIT and GPL 3 licenses.\n */\n\n/*global WebSocket, require*/\n\nvar osc = osc || __webpack_require__(/*! ./osc.js */ \"./node_modules/osc/dist/osc.js\");\n\n(function () {\n\n    \"use strict\";\n\n    osc.WebSocket = typeof WebSocket !== \"undefined\" ? WebSocket : __webpack_require__ (/*! ws */ \"./node_modules/ws/browser.js\");\n\n    osc.WebSocketPort = function (options) {\n        osc.Port.call(this, options);\n        this.on(\"open\", this.listen.bind(this));\n\n        this.socket = options.socket;\n        if (this.socket) {\n            if (this.socket.readyState === 1) {\n                osc.WebSocketPort.setupSocketForBinary(this.socket);\n                this.emit(\"open\", this.socket);\n            } else {\n                this.open();\n            }\n        }\n    };\n\n    var p = osc.WebSocketPort.prototype = Object.create(osc.Port.prototype);\n    p.constructor = osc.WebSocketPort;\n\n    p.open = function () {\n        if (!this.socket || this.socket.readyState > 1) {\n            this.socket = new osc.WebSocket(this.options.url);\n        }\n\n        osc.WebSocketPort.setupSocketForBinary(this.socket);\n\n        var that = this;\n        this.socket.onopen = function () {\n            that.emit(\"open\", that.socket);\n        };\n    };\n\n    p.listen = function () {\n        var that = this;\n        this.socket.onmessage = function (e) {\n            that.emit(\"data\", e.data, e);\n        };\n\n        this.socket.onerror = function (err) {\n            that.emit(\"error\", err);\n        };\n\n        this.socket.onclose = function (e) {\n            that.emit(\"close\", e);\n        };\n\n        that.emit(\"ready\");\n    };\n\n    p.sendRaw = function (encoded) {\n        if (!this.socket || this.socket.readyState !== 1) {\n            osc.fireClosedPortSendError(this);\n            return;\n        }\n\n        this.socket.send(encoded);\n    };\n\n    p.close = function (code, reason) {\n        this.socket.close(code, reason);\n    };\n\n    osc.WebSocketPort.setupSocketForBinary = function (socket) {\n        socket.binaryType = osc.isNode ? \"nodebuffer\" : \"arraybuffer\";\n    };\n\n}());\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ \"./node_modules/process/browser.js\"), __webpack_require__(/*! ./../../buffer/index.js */ \"./node_modules/buffer/index.js\").Buffer))\n\n//# sourceURL=webpack:///./node_modules/osc/dist/osc-browser.js?");

/***/ }),

/***/ "./node_modules/osc/dist/osc.js":
/*!**************************************!*\
  !*** ./node_modules/osc/dist/osc.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process, Buffer) {/*! osc.js 2.2.4, Copyright 2018 Colin Clark | github.com/colinbdclark/osc.js */\n\n/*\n * osc.js: An Open Sound Control library for JavaScript that works in both the browser and Node.js\n *\n * Copyright 2014-2016, Colin Clark\n * Licensed under the MIT and GPL 3 licenses.\n */\n\n/* global require, module, process, Buffer, Long */\n\nvar osc = osc || {};\n\n(function () {\n\n    \"use strict\";\n\n    osc.SECS_70YRS = 2208988800;\n    osc.TWO_32 = 4294967296;\n\n    osc.defaults = {\n        metadata: false,\n        unpackSingleArgs: true\n    };\n\n    // Unsupported, non-API property.\n    osc.isCommonJS =  true && module.exports ? true : false;\n\n    // Unsupported, non-API property.\n    osc.isNode = osc.isCommonJS && typeof window === \"undefined\";\n\n    // Unsupported, non-API property.\n    osc.isElectron = typeof process !== \"undefined\" &&\n        process.versions && process.versions.electron ? true : false;\n\n    // Unsupported, non-API property.\n    osc.isBufferEnv = osc.isNode || osc.isElectron;\n\n    // Unsupported, non-API function.\n    osc.isArray = function (obj) {\n        return obj && Object.prototype.toString.call(obj) === \"[object Array]\";\n    };\n\n    // Unsupported, non-API function.\n    osc.isTypedArrayView = function (obj) {\n        return obj.buffer && obj.buffer instanceof ArrayBuffer;\n    };\n\n    // Unsupported, non-API function.\n    osc.isBuffer = function (obj) {\n        return osc.isBufferEnv && obj instanceof Buffer;\n    };\n\n    // Unsupported, non-API member.\n    osc.Long = typeof Long !== \"undefined\" ? Long :\n        osc.isNode ? __webpack_require__(/*! long */ \"./node_modules/long/src/long.js\") : undefined;\n\n    /**\n     * Wraps the specified object in a DataView.\n     *\n     * @param {Array-like} obj the object to wrap in a DataView instance\n     * @return {DataView} the DataView object\n     */\n    // Unsupported, non-API function.\n    osc.dataView = function (obj, offset, length) {\n        if (obj.buffer) {\n            return new DataView(obj.buffer, offset, length);\n        }\n\n        if (obj instanceof ArrayBuffer) {\n            return new DataView(obj, offset, length);\n        }\n\n        return new DataView(new Uint8Array(obj), offset, length);\n    };\n\n    /**\n     * Takes an ArrayBuffer, TypedArray, DataView, Buffer, or array-like object\n     * and returns a Uint8Array view of it.\n     *\n     * Throws an error if the object isn't suitably array-like.\n     *\n     * @param {Array-like or Array-wrapping} obj an array-like or array-wrapping object\n     * @returns {Uint8Array} a typed array of octets\n     */\n    // Unsupported, non-API function.\n    osc.byteArray = function (obj) {\n        if (obj instanceof Uint8Array) {\n            return obj;\n        }\n\n        var buf = obj.buffer ? obj.buffer : obj;\n\n        if (!(buf instanceof ArrayBuffer) && (typeof buf.length === \"undefined\" || typeof buf === \"string\")) {\n            throw new Error(\"Can't wrap a non-array-like object as Uint8Array. Object was: \" +\n                JSON.stringify(obj, null, 2));\n        }\n\n\n        // TODO gh-39: This is a potentially unsafe algorithm;\n        // if we're getting anything other than a TypedArrayView (such as a DataView),\n        // we really need to determine the range of the view it is viewing.\n        return new Uint8Array(buf);\n    };\n\n    /**\n     * Takes an ArrayBuffer, TypedArray, DataView, or array-like object\n     * and returns a native buffer object\n     * (i.e. in Node.js, a Buffer object and in the browser, a Uint8Array).\n     *\n     * Throws an error if the object isn't suitably array-like.\n     *\n     * @param {Array-like or Array-wrapping} obj an array-like or array-wrapping object\n     * @returns {Buffer|Uint8Array} a buffer object\n     */\n    // Unsupported, non-API function.\n    osc.nativeBuffer = function (obj) {\n        if (osc.isBufferEnv) {\n            return osc.isBuffer(obj) ? obj :\n                new Buffer(obj.buffer ? obj : new Uint8Array(obj));\n        }\n\n        return osc.isTypedArrayView(obj) ? obj : new Uint8Array(obj);\n    };\n\n    // Unsupported, non-API function\n    osc.copyByteArray = function (source, target, offset) {\n        if (osc.isTypedArrayView(source) && osc.isTypedArrayView(target)) {\n            target.set(source, offset);\n        } else {\n            var start = offset === undefined ? 0 : offset,\n                len = Math.min(target.length - offset, source.length);\n\n            for (var i = 0, j = start; i < len; i++, j++) {\n                target[j] = source[i];\n            }\n        }\n\n        return target;\n    };\n\n    /**\n     * Reads an OSC-formatted string.\n     *\n     * @param {DataView} dv a DataView containing the raw bytes of the OSC string\n     * @param {Object} offsetState an offsetState object used to store the current offset index\n     * @return {String} the JavaScript String that was read\n     */\n    osc.readString = function (dv, offsetState) {\n        var charCodes = [],\n            idx = offsetState.idx;\n\n        for (; idx < dv.byteLength; idx++) {\n            var charCode = dv.getUint8(idx);\n            if (charCode !== 0) {\n                charCodes.push(charCode);\n            } else {\n                idx++;\n                break;\n            }\n        }\n\n        // Round to the nearest 4-byte block.\n        idx = (idx + 3) & ~0x03;\n        offsetState.idx = idx;\n\n        return String.fromCharCode.apply(null, charCodes);\n    };\n\n    /**\n     * Writes a JavaScript string as an OSC-formatted string.\n     *\n     * @param {String} str the string to write\n     * @return {Uint8Array} a buffer containing the OSC-formatted string\n     */\n    osc.writeString = function (str) {\n        var terminated = str + \"\\u0000\",\n            len = terminated.length,\n            paddedLen = (len + 3) & ~0x03,\n            arr = new Uint8Array(paddedLen);\n\n        for (var i = 0; i < terminated.length; i++) {\n            var charCode = terminated.charCodeAt(i);\n            arr[i] = charCode;\n        }\n\n        return arr;\n    };\n\n    // Unsupported, non-API function.\n    osc.readPrimitive = function (dv, readerName, numBytes, offsetState) {\n        var val = dv[readerName](offsetState.idx, false);\n        offsetState.idx += numBytes;\n\n        return val;\n    };\n\n    // Unsupported, non-API function.\n    osc.writePrimitive = function (val, dv, writerName, numBytes, offset) {\n        offset = offset === undefined ? 0 : offset;\n\n        var arr;\n        if (!dv) {\n            arr = new Uint8Array(numBytes);\n            dv = new DataView(arr.buffer);\n        } else {\n            arr = new Uint8Array(dv.buffer);\n        }\n\n        dv[writerName](offset, val, false);\n\n        return arr;\n    };\n\n    /**\n     * Reads an OSC int32 (\"i\") value.\n     *\n     * @param {DataView} dv a DataView containing the raw bytes\n     * @param {Object} offsetState an offsetState object used to store the current offset index into dv\n     * @return {Number} the number that was read\n     */\n    osc.readInt32 = function (dv, offsetState) {\n        return osc.readPrimitive(dv, \"getInt32\", 4, offsetState);\n    };\n\n    /**\n     * Writes an OSC int32 (\"i\") value.\n     *\n     * @param {Number} val the number to write\n     * @param {DataView} [dv] a DataView instance to write the number into\n     * @param {Number} [offset] an offset into dv\n     */\n    osc.writeInt32 = function (val, dv, offset) {\n        return osc.writePrimitive(val, dv, \"setInt32\", 4, offset);\n    };\n\n    /**\n     * Reads an OSC int64 (\"h\") value.\n     *\n     * @param {DataView} dv a DataView containing the raw bytes\n     * @param {Object} offsetState an offsetState object used to store the current offset index into dv\n     * @return {Number} the number that was read\n     */\n    osc.readInt64 = function (dv, offsetState) {\n        var high = osc.readPrimitive(dv, \"getInt32\", 4, offsetState),\n            low = osc.readPrimitive(dv, \"getInt32\", 4, offsetState);\n\n        if (osc.Long) {\n            return new osc.Long(low, high);\n        } else {\n            return {\n                high: high,\n                low: low,\n                unsigned: false\n            };\n        }\n    };\n\n    /**\n     * Writes an OSC int64 (\"h\") value.\n     *\n     * @param {Number} val the number to write\n     * @param {DataView} [dv] a DataView instance to write the number into\n     * @param {Number} [offset] an offset into dv\n     */\n    osc.writeInt64 = function (val, dv, offset) {\n        var arr = new Uint8Array(8);\n        arr.set(osc.writePrimitive(val.high, dv, \"setInt32\", 4, offset), 0);\n        arr.set(osc.writePrimitive(val.low,  dv, \"setInt32\", 4, offset + 4), 4);\n        return arr;\n    };\n\n    /**\n     * Reads an OSC float32 (\"f\") value.\n     *\n     * @param {DataView} dv a DataView containing the raw bytes\n     * @param {Object} offsetState an offsetState object used to store the current offset index into dv\n     * @return {Number} the number that was read\n     */\n    osc.readFloat32 = function (dv, offsetState) {\n        return osc.readPrimitive(dv, \"getFloat32\", 4, offsetState);\n    };\n\n    /**\n     * Writes an OSC float32 (\"f\") value.\n     *\n     * @param {Number} val the number to write\n     * @param {DataView} [dv] a DataView instance to write the number into\n     * @param {Number} [offset] an offset into dv\n     */\n    osc.writeFloat32 = function (val, dv, offset) {\n        return osc.writePrimitive(val, dv, \"setFloat32\", 4, offset);\n    };\n\n    /**\n     * Reads an OSC float64 (\"d\") value.\n     *\n     * @param {DataView} dv a DataView containing the raw bytes\n     * @param {Object} offsetState an offsetState object used to store the current offset index into dv\n     * @return {Number} the number that was read\n     */\n    osc.readFloat64 = function (dv, offsetState) {\n        return osc.readPrimitive(dv, \"getFloat64\", 8, offsetState);\n    };\n\n    /**\n     * Writes an OSC float64 (\"d\") value.\n     *\n     * @param {Number} val the number to write\n     * @param {DataView} [dv] a DataView instance to write the number into\n     * @param {Number} [offset] an offset into dv\n     */\n    osc.writeFloat64 = function (val, dv, offset) {\n        return osc.writePrimitive(val, dv, \"setFloat64\", 8, offset);\n    };\n\n    /**\n     * Reads an OSC 32-bit ASCII character (\"c\") value.\n     *\n     * @param {DataView} dv a DataView containing the raw bytes\n     * @param {Object} offsetState an offsetState object used to store the current offset index into dv\n     * @return {String} a string containing the read character\n     */\n    osc.readChar32 = function (dv, offsetState) {\n        var charCode = osc.readPrimitive(dv, \"getUint32\", 4, offsetState);\n        return String.fromCharCode(charCode);\n    };\n\n    /**\n     * Writes an OSC 32-bit ASCII character (\"c\") value.\n     *\n     * @param {String} str the string from which the first character will be written\n     * @param {DataView} [dv] a DataView instance to write the character into\n     * @param {Number} [offset] an offset into dv\n     * @return {String} a string containing the read character\n     */\n    osc.writeChar32 = function (str, dv, offset) {\n        var charCode = str.charCodeAt(0);\n        if (charCode === undefined || charCode < -1) {\n            return undefined;\n        }\n\n        return osc.writePrimitive(charCode, dv, \"setUint32\", 4, offset);\n    };\n\n    /**\n     * Reads an OSC blob (\"b\") (i.e. a Uint8Array).\n     *\n     * @param {DataView} dv a DataView instance to read from\n     * @param {Object} offsetState an offsetState object used to store the current offset index into dv\n     * @return {Uint8Array} the data that was read\n     */\n    osc.readBlob = function (dv, offsetState) {\n        var len = osc.readInt32(dv, offsetState),\n            paddedLen = (len + 3) & ~0x03,\n            blob = new Uint8Array(dv.buffer, offsetState.idx, len);\n\n        offsetState.idx += paddedLen;\n\n        return blob;\n    };\n\n    /**\n     * Writes a raw collection of bytes to a new ArrayBuffer.\n     *\n     * @param {Array-like} data a collection of octets\n     * @return {ArrayBuffer} a buffer containing the OSC-formatted blob\n     */\n    osc.writeBlob = function (data) {\n        data = osc.byteArray(data);\n\n        var len = data.byteLength,\n            paddedLen = (len + 3) & ~0x03,\n            offset = 4, // Extra 4 bytes is for the size.\n            blobLen = paddedLen + offset,\n            arr = new Uint8Array(blobLen),\n            dv = new DataView(arr.buffer);\n\n        // Write the size.\n        osc.writeInt32(len, dv);\n\n        // Since we're writing to a real ArrayBuffer,\n        // we don't need to pad the remaining bytes.\n        arr.set(data, offset);\n\n        return arr;\n    };\n\n    /**\n     * Reads an OSC 4-byte MIDI message.\n     *\n     * @param {DataView} dv the DataView instance to read from\n     * @param {Object} offsetState an offsetState object used to store the current offset index into dv\n     * @return {Uint8Array} an array containing (in order) the port ID, status, data1 and data1 bytes\n     */\n    osc.readMIDIBytes = function (dv, offsetState) {\n        var midi = new Uint8Array(dv.buffer, offsetState.idx, 4);\n        offsetState.idx += 4;\n\n        return midi;\n    };\n\n    /**\n     * Writes an OSC 4-byte MIDI message.\n     *\n     * @param {Array-like} bytes a 4-element array consisting of the port ID, status, data1 and data1 bytes\n     * @return {Uint8Array} the written message\n     */\n    osc.writeMIDIBytes = function (bytes) {\n        bytes = osc.byteArray(bytes);\n\n        var arr = new Uint8Array(4);\n        arr.set(bytes);\n\n        return arr;\n    };\n\n    /**\n     * Reads an OSC RGBA colour value.\n     *\n     * @param {DataView} dv the DataView instance to read from\n     * @param {Object} offsetState an offsetState object used to store the current offset index into dv\n     * @return {Object} a colour object containing r, g, b, and a properties\n     */\n    osc.readColor = function (dv, offsetState) {\n        var bytes = new Uint8Array(dv.buffer, offsetState.idx, 4),\n            alpha = bytes[3] / 255;\n\n        offsetState.idx += 4;\n\n        return {\n            r: bytes[0],\n            g: bytes[1],\n            b: bytes[2],\n            a: alpha\n        };\n    };\n\n    /**\n     * Writes an OSC RGBA colour value.\n     *\n     * @param {Object} color a colour object containing r, g, b, and a properties\n     * @return {Uint8Array} a byte array containing the written color\n     */\n    osc.writeColor = function (color) {\n        var alpha = Math.round(color.a * 255),\n            arr = new Uint8Array([color.r, color.g, color.b, alpha]);\n\n        return arr;\n    };\n\n    /**\n     * Reads an OSC true (\"T\") value by directly returning the JavaScript Boolean \"true\".\n     */\n    osc.readTrue = function () {\n        return true;\n    };\n\n    /**\n     * Reads an OSC false (\"F\") value by directly returning the JavaScript Boolean \"false\".\n     */\n    osc.readFalse = function () {\n        return false;\n    };\n\n    /**\n     * Reads an OSC nil (\"N\") value by directly returning the JavaScript \"null\" value.\n     */\n    osc.readNull = function () {\n        return null;\n    };\n\n    /**\n     * Reads an OSC impulse/bang/infinitum (\"I\") value by directly returning 1.0.\n     */\n    osc.readImpulse = function () {\n        return 1.0;\n    };\n\n    /**\n     * Reads an OSC time tag (\"t\").\n     *\n     * @param {DataView} dv the DataView instance to read from\n     * @param {Object} offsetState an offset state object containing the current index into dv\n     * @param {Object} a time tag object containing both the raw NTP as well as the converted native (i.e. JS/UNIX) time\n     */\n    osc.readTimeTag = function (dv, offsetState) {\n        var secs1900 = osc.readPrimitive(dv, \"getUint32\", 4, offsetState),\n            frac = osc.readPrimitive(dv, \"getUint32\", 4, offsetState),\n            native = (secs1900 === 0 && frac === 1) ? Date.now() : osc.ntpToJSTime(secs1900, frac);\n\n        return {\n            raw: [secs1900, frac],\n            native: native\n        };\n    };\n\n    /**\n     * Writes an OSC time tag (\"t\").\n     *\n     * Takes, as its argument, a time tag object containing either a \"raw\" or \"native property.\"\n     * The raw timestamp must conform to the NTP standard representation, consisting of two unsigned int32\n     * values. The first represents the number of seconds since January 1, 1900; the second, fractions of a second.\n     * \"Native\" JavaScript timestamps are specified as a Number representing milliseconds since January 1, 1970.\n     *\n     * @param {Object} timeTag time tag object containing either a native JS timestamp (in ms) or a NTP timestamp pair\n     * @return {Uint8Array} raw bytes for the written time tag\n     */\n    osc.writeTimeTag = function (timeTag) {\n        var raw = timeTag.raw ? timeTag.raw : osc.jsToNTPTime(timeTag.native),\n            arr = new Uint8Array(8), // Two Unit32s.\n            dv = new DataView(arr.buffer);\n\n        osc.writeInt32(raw[0], dv, 0);\n        osc.writeInt32(raw[1], dv, 4);\n\n        return arr;\n    };\n\n    /**\n     * Produces a time tag containing a raw NTP timestamp\n     * relative to now by the specified number of seconds.\n     *\n     * @param {Number} secs the number of seconds relative to now (i.e. + for the future, - for the past)\n     * @param {Number} now the number of milliseconds since epoch to use as the current time. Defaults to Date.now()\n     * @return {Object} the time tag\n     */\n    osc.timeTag = function (secs, now) {\n        secs = secs || 0;\n        now = now || Date.now();\n\n        var nowSecs = now / 1000,\n            nowWhole = Math.floor(nowSecs),\n            nowFracs = nowSecs - nowWhole,\n            secsWhole = Math.floor(secs),\n            secsFracs = secs - secsWhole,\n            fracs = nowFracs + secsFracs;\n\n        if (fracs > 1) {\n            var fracsWhole = Math.floor(fracs),\n                fracsFracs = fracs - fracsWhole;\n\n            secsWhole += fracsWhole;\n            fracs = fracsFracs;\n        }\n\n        var ntpSecs = nowWhole + secsWhole + osc.SECS_70YRS,\n            ntpFracs = Math.round(osc.TWO_32 * fracs);\n\n        return {\n            raw: [ntpSecs, ntpFracs]\n        };\n    };\n\n    /**\n     * Converts OSC's standard time tag representation (which is the NTP format)\n     * into the JavaScript/UNIX format in milliseconds.\n     *\n     * @param {Number} secs1900 the number of seconds since 1900\n     * @param {Number} frac the number of fractions of a second (between 0 and 2^32)\n     * @return {Number} a JavaScript-compatible timestamp in milliseconds\n     */\n    osc.ntpToJSTime = function (secs1900, frac) {\n        var secs1970 = secs1900 - osc.SECS_70YRS,\n            decimals = frac / osc.TWO_32,\n            msTime = (secs1970 + decimals) * 1000;\n\n        return msTime;\n    };\n\n    osc.jsToNTPTime = function (jsTime) {\n        var secs = jsTime / 1000,\n            secsWhole = Math.floor(secs),\n            secsFrac = secs - secsWhole,\n            ntpSecs = secsWhole + osc.SECS_70YRS,\n            ntpFracs = Math.round(osc.TWO_32 * secsFrac);\n\n        return [ntpSecs, ntpFracs];\n    };\n\n    /**\n     * Reads the argument portion of an OSC message.\n     *\n     * @param {DataView} dv a DataView instance to read from\n     * @param {Object} offsetState the offsetState object that stores the current offset into dv\n     * @param {Object} [options] read options\n     * @return {Array} an array of the OSC arguments that were read\n     */\n    osc.readArguments = function (dv, options, offsetState) {\n        var typeTagString = osc.readString(dv, offsetState);\n        if (typeTagString.indexOf(\",\") !== 0) {\n            // Despite what the OSC 1.0 spec says,\n            // it just doesn't make sense to handle messages without type tags.\n            // scsynth appears to read such messages as if they have a single\n            // Uint8 argument. sclang throws an error if the type tag is omitted.\n            throw new Error(\"A malformed type tag string was found while reading \" +\n                \"the arguments of an OSC message. String was: \" +\n                typeTagString, \" at offset: \" + offsetState.idx);\n        }\n\n        var argTypes = typeTagString.substring(1).split(\"\"),\n            args = [];\n\n        osc.readArgumentsIntoArray(args, argTypes, typeTagString, dv, options, offsetState);\n\n        return args;\n    };\n\n    // Unsupported, non-API function.\n    osc.readArgument = function (argType, typeTagString, dv, options, offsetState) {\n        var typeSpec = osc.argumentTypes[argType];\n        if (!typeSpec) {\n            throw new Error(\"'\" + argType + \"' is not a valid OSC type tag. Type tag string was: \" + typeTagString);\n        }\n\n        var argReader = typeSpec.reader,\n            arg = osc[argReader](dv, offsetState);\n\n        if (options.metadata) {\n            arg = {\n                type: argType,\n                value: arg\n            };\n        }\n\n        return arg;\n    };\n\n    // Unsupported, non-API function.\n    osc.readArgumentsIntoArray = function (arr, argTypes, typeTagString, dv, options, offsetState) {\n        var i = 0;\n\n        while (i < argTypes.length) {\n            var argType = argTypes[i],\n                arg;\n\n            if (argType === \"[\") {\n                var fromArrayOpen = argTypes.slice(i + 1),\n                    endArrayIdx = fromArrayOpen.indexOf(\"]\");\n\n                if (endArrayIdx < 0) {\n                    throw new Error(\"Invalid argument type tag: an open array type tag ('[') was found \" +\n                        \"without a matching close array tag ('[]'). Type tag was: \" + typeTagString);\n                }\n\n                var typesInArray = fromArrayOpen.slice(0, endArrayIdx);\n                arg = osc.readArgumentsIntoArray([], typesInArray, typeTagString, dv, options, offsetState);\n                i += endArrayIdx + 2;\n            } else {\n                arg = osc.readArgument(argType, typeTagString, dv, options, offsetState);\n                i++;\n            }\n\n            arr.push(arg);\n        }\n\n        return arr;\n    };\n\n    /**\n     * Writes the specified arguments.\n     *\n     * @param {Array} args an array of arguments\n     * @param {Object} options options for writing\n     * @return {Uint8Array} a buffer containing the OSC-formatted argument type tag and values\n     */\n    osc.writeArguments = function (args, options) {\n        var argCollection = osc.collectArguments(args, options);\n        return osc.joinParts(argCollection);\n    };\n\n    // Unsupported, non-API function.\n    osc.joinParts = function (dataCollection) {\n        var buf = new Uint8Array(dataCollection.byteLength),\n            parts = dataCollection.parts,\n            offset = 0;\n\n        for (var i = 0; i < parts.length; i++) {\n            var part = parts[i];\n            osc.copyByteArray(part, buf, offset);\n            offset += part.length;\n        }\n\n        return buf;\n    };\n\n    // Unsupported, non-API function.\n    osc.addDataPart = function (dataPart, dataCollection) {\n        dataCollection.parts.push(dataPart);\n        dataCollection.byteLength += dataPart.length;\n    };\n\n    osc.writeArrayArguments = function (args, dataCollection) {\n        var typeTag = \"[\";\n\n        for (var i = 0; i < args.length; i++) {\n            var arg = args[i];\n            typeTag += osc.writeArgument(arg, dataCollection);\n        }\n\n        typeTag += \"]\";\n\n        return typeTag;\n    };\n\n    osc.writeArgument = function (arg, dataCollection) {\n        if (osc.isArray(arg)) {\n            return osc.writeArrayArguments(arg, dataCollection);\n        }\n\n        var type = arg.type,\n            writer = osc.argumentTypes[type].writer;\n\n        if (writer) {\n            var data = osc[writer](arg.value);\n            osc.addDataPart(data, dataCollection);\n        }\n\n        return arg.type;\n    };\n\n    // Unsupported, non-API function.\n    osc.collectArguments = function (args, options, dataCollection) {\n        if (!osc.isArray(args)) {\n            args = typeof args === \"undefined\" ? [] : [args];\n        }\n\n        dataCollection = dataCollection || {\n            byteLength: 0,\n            parts: []\n        };\n\n        if (!options.metadata) {\n            args = osc.annotateArguments(args);\n        }\n\n        var typeTagString = \",\",\n            currPartIdx = dataCollection.parts.length;\n\n        for (var i = 0; i < args.length; i++) {\n            var arg = args[i];\n            typeTagString += osc.writeArgument(arg, dataCollection);\n        }\n\n        var typeData = osc.writeString(typeTagString);\n        dataCollection.byteLength += typeData.byteLength;\n        dataCollection.parts.splice(currPartIdx, 0, typeData);\n\n        return dataCollection;\n    };\n\n    /**\n     * Reads an OSC message.\n     *\n     * @param {Array-like} data an array of bytes to read from\n     * @param {Object} [options] read options\n     * @param {Object} [offsetState] an offsetState object that stores the current offset into dv\n     * @return {Object} the OSC message, formatted as a JavaScript object containing \"address\" and \"args\" properties\n     */\n    osc.readMessage = function (data, options, offsetState) {\n        options = options || osc.defaults;\n\n        var dv = osc.dataView(data, data.byteOffset, data.byteLength);\n        offsetState = offsetState || {\n            idx: 0\n        };\n\n        var address = osc.readString(dv, offsetState);\n        return osc.readMessageContents(address, dv, options, offsetState);\n    };\n\n    // Unsupported, non-API function.\n    osc.readMessageContents = function (address, dv, options, offsetState) {\n        if (address.indexOf(\"/\") !== 0) {\n            throw new Error(\"A malformed OSC address was found while reading \" +\n                \"an OSC message. String was: \" + address);\n        }\n\n        var args = osc.readArguments(dv, options, offsetState);\n\n        return {\n            address: address,\n            args: args.length === 1 && options.unpackSingleArgs ? args[0] : args\n        };\n    };\n\n    // Unsupported, non-API function.\n    osc.collectMessageParts = function (msg, options, dataCollection) {\n        dataCollection = dataCollection || {\n            byteLength: 0,\n            parts: []\n        };\n\n        osc.addDataPart(osc.writeString(msg.address), dataCollection);\n        return osc.collectArguments(msg.args, options, dataCollection);\n    };\n\n    /**\n     * Writes an OSC message.\n     *\n     * @param {Object} msg a message object containing \"address\" and \"args\" properties\n     * @param {Object} [options] write options\n     * @return {Uint8Array} an array of bytes containing the OSC message\n     */\n    osc.writeMessage = function (msg, options) {\n        options = options || osc.defaults;\n\n        if (!osc.isValidMessage(msg)) {\n            throw new Error(\"An OSC message must contain a valid address. Message was: \" +\n                JSON.stringify(msg, null, 2));\n        }\n\n        var msgCollection = osc.collectMessageParts(msg, options);\n        return osc.joinParts(msgCollection);\n    };\n\n    osc.isValidMessage = function (msg) {\n        return msg.address && msg.address.indexOf(\"/\") === 0;\n    };\n\n    /**\n     * Reads an OSC bundle.\n     *\n     * @param {DataView} dv the DataView instance to read from\n     * @param {Object} [options] read optoins\n     * @param {Object} [offsetState] an offsetState object that stores the current offset into dv\n     * @return {Object} the bundle or message object that was read\n     */\n    osc.readBundle = function (dv, options, offsetState) {\n        return osc.readPacket(dv, options, offsetState);\n    };\n\n    // Unsupported, non-API function.\n    osc.collectBundlePackets = function (bundle, options, dataCollection) {\n        dataCollection = dataCollection || {\n            byteLength: 0,\n            parts: []\n        };\n\n        osc.addDataPart(osc.writeString(\"#bundle\"), dataCollection);\n        osc.addDataPart(osc.writeTimeTag(bundle.timeTag), dataCollection);\n\n        for (var i = 0; i < bundle.packets.length; i++) {\n            var packet = bundle.packets[i],\n                collector = packet.address ? osc.collectMessageParts : osc.collectBundlePackets,\n                packetCollection = collector(packet, options);\n\n            dataCollection.byteLength += packetCollection.byteLength;\n            osc.addDataPart(osc.writeInt32(packetCollection.byteLength), dataCollection);\n            dataCollection.parts = dataCollection.parts.concat(packetCollection.parts);\n        }\n\n        return dataCollection;\n    };\n\n    /**\n     * Writes an OSC bundle.\n     *\n     * @param {Object} a bundle object containing \"timeTag\" and \"packets\" properties\n     * @param {object} [options] write options\n     * @return {Uint8Array} an array of bytes containing the message\n     */\n    osc.writeBundle = function (bundle, options) {\n        if (!osc.isValidBundle(bundle)) {\n            throw new Error(\"An OSC bundle must contain 'timeTag' and 'packets' properties. \" +\n                \"Bundle was: \" + JSON.stringify(bundle, null, 2));\n        }\n\n        options = options || osc.defaults;\n        var bundleCollection = osc.collectBundlePackets(bundle, options);\n\n        return osc.joinParts(bundleCollection);\n    };\n\n    osc.isValidBundle = function (bundle) {\n        return bundle.timeTag !== undefined && bundle.packets !== undefined;\n    };\n\n    // Unsupported, non-API function.\n    osc.readBundleContents = function (dv, options, offsetState, len) {\n        var timeTag = osc.readTimeTag(dv, offsetState),\n            packets = [];\n\n        while (offsetState.idx < len) {\n            var packetSize = osc.readInt32(dv, offsetState),\n                packetLen = offsetState.idx + packetSize,\n                packet = osc.readPacket(dv, options, offsetState, packetLen);\n\n            packets.push(packet);\n        }\n\n        return {\n            timeTag: timeTag,\n            packets: packets\n        };\n    };\n\n    /**\n     * Reads an OSC packet, which may consist of either a bundle or a message.\n     *\n     * @param {Array-like} data an array of bytes to read from\n     * @param {Object} [options] read options\n     * @return {Object} a bundle or message object\n     */\n    osc.readPacket = function (data, options, offsetState, len) {\n        var dv = osc.dataView(data, data.byteOffset, data.byteLength);\n\n        len = len === undefined ? dv.byteLength : len;\n        offsetState = offsetState || {\n            idx: 0\n        };\n\n        var header = osc.readString(dv, offsetState),\n            firstChar = header[0];\n\n        if (firstChar === \"#\") {\n            return osc.readBundleContents(dv, options, offsetState, len);\n        } else if (firstChar === \"/\") {\n            return osc.readMessageContents(header, dv, options, offsetState);\n        }\n\n        throw new Error(\"The header of an OSC packet didn't contain an OSC address or a #bundle string.\" +\n            \" Header was: \" + header);\n    };\n\n    /**\n     * Writes an OSC packet, which may consist of either of a bundle or a message.\n     *\n     * @param {Object} a bundle or message object\n     * @param {Object} [options] write options\n     * @return {Uint8Array} an array of bytes containing the message\n     */\n    osc.writePacket = function (packet, options) {\n        if (osc.isValidMessage(packet)) {\n            return osc.writeMessage(packet, options);\n        } else if (osc.isValidBundle(packet)) {\n            return osc.writeBundle(packet, options);\n        } else {\n            throw new Error(\"The specified packet was not recognized as a valid OSC message or bundle.\" +\n                \" Packet was: \" + JSON.stringify(packet, null, 2));\n        }\n    };\n\n    // Unsupported, non-API.\n    osc.argumentTypes = {\n        i: {\n            reader: \"readInt32\",\n            writer: \"writeInt32\"\n        },\n        h: {\n            reader: \"readInt64\",\n            writer: \"writeInt64\"\n        },\n        f: {\n            reader: \"readFloat32\",\n            writer: \"writeFloat32\"\n        },\n        s: {\n            reader: \"readString\",\n            writer: \"writeString\"\n        },\n        S: {\n            reader: \"readString\",\n            writer: \"writeString\"\n        },\n        b: {\n            reader: \"readBlob\",\n            writer: \"writeBlob\"\n        },\n        t: {\n            reader: \"readTimeTag\",\n            writer: \"writeTimeTag\"\n        },\n        T: {\n            reader: \"readTrue\"\n        },\n        F: {\n            reader: \"readFalse\"\n        },\n        N: {\n            reader: \"readNull\"\n        },\n        I: {\n            reader: \"readImpulse\"\n        },\n        d: {\n            reader: \"readFloat64\",\n            writer: \"writeFloat64\"\n        },\n        c: {\n            reader: \"readChar32\",\n            writer: \"writeChar32\"\n        },\n        r: {\n            reader: \"readColor\",\n            writer: \"writeColor\"\n        },\n        m: {\n            reader: \"readMIDIBytes\",\n            writer: \"writeMIDIBytes\"\n        },\n        // [] are special cased within read/writeArguments()\n    };\n\n    // Unsupported, non-API function.\n    osc.inferTypeForArgument = function (arg) {\n        var type = typeof arg;\n\n        // TODO: This is freaking hideous.\n        switch (type) {\n            case \"boolean\":\n                return arg ? \"T\" : \"F\";\n            case \"string\":\n                return \"s\";\n            case \"number\":\n                return \"f\";\n            case \"undefined\":\n                return \"N\";\n            case \"object\":\n                if (arg === null) {\n                    return \"N\";\n                } else if (arg instanceof Uint8Array ||\n                    arg instanceof ArrayBuffer) {\n                    return \"b\";\n                } else if (typeof arg.high === \"number\" && typeof arg.low === \"number\") {\n                    return \"h\";\n                }\n                break;\n        }\n\n        throw new Error(\"Can't infer OSC argument type for value: \" +\n            JSON.stringify(arg, null, 2));\n    };\n\n    // Unsupported, non-API function.\n    osc.annotateArguments = function (args) {\n        var annotated = [];\n\n        for (var i = 0; i < args.length; i++) {\n            var arg = args[i],\n                msgArg;\n\n            if (typeof (arg) === \"object\" && arg.type && arg.value !== undefined) {\n                // We've got an explicitly typed argument.\n                msgArg = arg;\n            } else if (osc.isArray(arg)) {\n                // We've got an array of arguments,\n                // so they each need to be inferred and expanded.\n                msgArg = osc.annotateArguments(arg);\n            } else {\n                var oscType = osc.inferTypeForArgument(arg);\n                msgArg = {\n                    type: oscType,\n                    value: arg\n                };\n            }\n\n            annotated.push(msgArg);\n        }\n\n        return annotated;\n    };\n\n    if (osc.isCommonJS) {\n        module.exports = osc;\n    }\n}());\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ \"./node_modules/process/browser.js\"), __webpack_require__(/*! ./../../buffer/index.js */ \"./node_modules/buffer/index.js\").Buffer))\n\n//# sourceURL=webpack:///./node_modules/osc/dist/osc.js?");

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n//# sourceURL=webpack:///./node_modules/process/browser.js?");

/***/ }),

/***/ "./node_modules/slip/src/slip.js":
/*!***************************************!*\
  !*** ./node_modules/slip/src/slip.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/*\n * slip.js: A plain JavaScript SLIP implementation that works in both the browser and Node.js\n *\n * Copyright 2014, Colin Clark\n * Licensed under the MIT and GPL 3 licenses.\n */\n\n/*global exports, define*/\n(function (root, factory) {\n    \"use strict\";\n\n    if (true) {\n        // We're in a CommonJS-style loader.\n        root.slip = exports;\n        factory(exports);\n    } else {}\n}(this, function (exports) {\n\n    \"use strict\";\n\n    var slip = exports;\n\n    slip.END = 192;\n    slip.ESC = 219;\n    slip.ESC_END = 220;\n    slip.ESC_ESC = 221;\n\n    slip.byteArray = function (data, offset, length) {\n        return data instanceof ArrayBuffer ? new Uint8Array(data, offset, length) : data;\n    };\n\n    slip.expandByteArray = function (arr) {\n        var expanded = new Uint8Array(arr.length * 2);\n        expanded.set(arr);\n\n        return expanded;\n    };\n\n    slip.sliceByteArray = function (arr, start, end) {\n        var sliced = arr.buffer.slice ? arr.buffer.slice(start, end) : arr.subarray(start, end);\n        return new Uint8Array(sliced);\n    };\n\n    /**\n     * SLIP encodes a byte array.\n     *\n     * @param {Array-like} data a Uint8Array, Node.js Buffer, ArrayBuffer, or [] containing raw bytes\n     * @param {Object} options encoder options\n     * @return {Uint8Array} the encoded copy of the data\n     */\n    slip.encode = function (data, o) {\n        o = o || {};\n        o.bufferPadding = o.bufferPadding || 4; // Will be rounded to the nearest 4 bytes.\n        data = slip.byteArray(data, o.offset, o.byteLength);\n\n        var bufLen = (data.length + o.bufferPadding + 3) & ~0x03,\n            encoded = new Uint8Array(bufLen),\n            j = 1;\n\n        encoded[0] = slip.END;\n\n        for (var i = 0; i < data.length; i++) {\n            // We always need enough space for two value bytes plus a trailing END.\n            if (j > encoded.length - 3) {\n                encoded = slip.expandByteArray(encoded);\n            }\n\n            var val = data[i];\n            if (val === slip.END) {\n                encoded[j++] = slip.ESC;\n                val = slip.ESC_END;\n            } else if (val === slip.ESC) {\n                encoded[j++] = slip.ESC;\n                val = slip.ESC_ESC;\n            }\n\n            encoded[j++] = val;\n        }\n\n        encoded[j] = slip.END;\n        return slip.sliceByteArray(encoded, 0, j + 1);\n    };\n\n    /**\n     * Creates a new SLIP Decoder.\n     * @constructor\n     *\n     * @param {Function} onMessage a callback function that will be invoked when a message has been fully decoded\n     * @param {Number} maxBufferSize the maximum size of a incoming message; larger messages will throw an error\n     */\n    slip.Decoder = function (o) {\n        o = typeof o !== \"function\" ? o || {} : {\n            onMessage: o\n        };\n\n        this.maxMessageSize = o.maxMessageSize || 10485760; // Defaults to 10 MB.\n        this.bufferSize = o.bufferSize || 1024; // Message buffer defaults to 1 KB.\n        this.msgBuffer = new Uint8Array(this.bufferSize);\n        this.msgBufferIdx = 0;\n        this.onMessage = o.onMessage;\n        this.onError = o.onError;\n        this.escape = false;\n    };\n\n    var p = slip.Decoder.prototype;\n\n    /**\n     * Decodes a SLIP data packet.\n     * The onMessage callback will be invoked when a complete message has been decoded.\n     *\n     * @param {Array-like} data an incoming stream of bytes\n     */\n    p.decode = function (data) {\n        data = slip.byteArray(data);\n\n        var msg;\n        for (var i = 0; i < data.length; i++) {\n            var val = data[i];\n\n            if (this.escape) {\n                if (val === slip.ESC_ESC) {\n                    val = slip.ESC;\n                } else if (val === slip.ESC_END) {\n                    val = slip.END;\n                }\n            } else {\n                if (val === slip.ESC) {\n                    this.escape = true;\n                    continue;\n                }\n\n                if (val === slip.END) {\n                    msg = this.handleEnd();\n                    continue;\n                }\n            }\n\n            var more = this.addByte(val);\n            if (!more) {\n                this.handleMessageMaxError();\n            }\n        }\n\n        return msg;\n    };\n\n    p.handleMessageMaxError = function () {\n        if (this.onError) {\n            this.onError(this.msgBuffer.subarray(0),\n                \"The message is too large; the maximum message size is \" +\n                this.maxMessageSize / 1024 + \"KB. Use a larger maxMessageSize if necessary.\");\n        }\n\n        // Reset everything and carry on.\n        this.msgBufferIdx = 0;\n        this.escape = false;\n    };\n\n    // Unsupported, non-API method.\n    p.addByte = function (val) {\n        if (this.msgBufferIdx > this.msgBuffer.length - 1) {\n            this.msgBuffer = slip.expandByteArray(this.msgBuffer);\n        }\n\n        this.msgBuffer[this.msgBufferIdx++] = val;\n        this.escape = false;\n\n        return this.msgBuffer.length < this.maxMessageSize;\n    };\n\n    // Unsupported, non-API method.\n    p.handleEnd = function () {\n        if (this.msgBufferIdx === 0) {\n            return; // Toss opening END byte and carry on.\n        }\n\n        var msg = slip.sliceByteArray(this.msgBuffer, 0, this.msgBufferIdx);\n        if (this.onMessage) {\n            this.onMessage(msg);\n        }\n\n        // Clear our pointer into the message buffer.\n        this.msgBufferIdx = 0;\n\n        return msg;\n    };\n\n    return slip;\n}));\n\n\n//# sourceURL=webpack:///./node_modules/slip/src/slip.js?");

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n\n\n//# sourceURL=webpack:///(webpack)/buildin/global.js?");

/***/ }),

/***/ "./node_modules/ws/browser.js":
/*!************************************!*\
  !*** ./node_modules/ws/browser.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = function () {\n  throw new Error(\n    'ws does not work in the browser. Browser clients must use the native ' +\n      'WebSocket object'\n  );\n};\n\n\n//# sourceURL=webpack:///./node_modules/ws/browser.js?");

/***/ }),

/***/ "./src/assets/js/objectsKontrol.js":
/*!*****************************************!*\
  !*** ./src/assets/js/objectsKontrol.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/** ObjKontrol\n * Bibliothèque d'interfaces HTML simples.\n *\n *\n * Version: 0.2.0 (22/03/2019)\n * Require: vanilla js\n *\n * Licence Creative Commons CC : BY-SA\n * Author : Fabien Guntz\n *\n * Big Thanks to Anne-Marie Puizillout\n */\n\nclass ObjectsKontrol{\n\n    constructor(element) {\n\n        //element est soit un AudioContext soit un wsLink\n        if(element instanceof AudioContext){\n            this.contextAudio=element;\n            this.paramContext = {\n                \"contextAudio\":element,\n                \"onvaluechange\":function(){}\n            };\n        }else{\n            this.paramContext = {\n                \"onvaluechange\":function(param){element.sendValueOsc(param)}\n            };\n        }\n        this.collSliders = [];\n        this.collKnobs = [];\n        this.collBangs = [];\n        this.collToggles = [];\n        this.collLeds = [];\n        this.collOuts = [];\n        this.collOscillators = [];\n    }\n\n    loadObjects(){\n        //un oscillateur est composé de knobs, il faut donc d'abord charger les oscillateurs avant les knobs\n        this.loadOscillators();\n        this.loadBangs();\n        this.loadKnobs();\n        this.loadSliders();\n        this.loadToggles();\n        this.loadLeds();\n        this.loadOuts();\n    }\n\n    configureObjects(){\n        this.configureOscillators();\n    }\n\n    loadSliders(){\n        //on crée tous les objets Slider présents dans le DOM\n        let collSlidersDom = document.querySelectorAll(\".slider\");\n\n        //on récupère tous les objets du DOM de la classe knob\n        for (let sliderDom of collSlidersDom){\n            //pour chaque objet du DOM de la classe slider on crée un objet javascript slider\n            let slider;\n\n            let paramObject ={\n                \"elementDom\":sliderDom,\n                \"id\":sliderDom.id,\n                \"legende\":sliderDom.dataset.legende,\n                \"valeurMin\": sliderDom.dataset.valeurMin,\n                \"valeurMax\":sliderDom.dataset.valeurMax,\n                \"width\":sliderDom.dataset.width,\n                \"height\":sliderDom.dataset.height,\n                \"styleBorder\":sliderDom.dataset.styleBorder,\n                \"valeur\":parseFloat(sliderDom.dataset.valeurInit),\n                \"scaleX\":parseFloat(sliderDom.dataset.width/100.0),//le elementDom de base a été créé dans un rectangle de 100 pixels par 300 pixels\n                \"scaleY\":parseFloat(sliderDom.dataset.height/300.0),//le elementDom de base a été créé dans un rectangle de 100 pixels par 300 pixels\n                \"couleur\":sliderDom.dataset.couleur,\n            };\n\n            if (!this.contextAudio) {\n                paramObject=ObjectsKontrol.jsonConcat(paramObject,{\"adresseOsc\":sliderDom.dataset.adresseOsc});\n                paramObject=ObjectsKontrol.jsonConcat(paramObject,{\"typeVal\":sliderDom.dataset.typeVal});\n            }\n            paramObject=ObjectsKontrol.jsonConcat(paramObject,this.paramContext);\n\n            if (this.contextAudio){\n                slider = new SliderAudio(paramObject);\n            }\n            else{\n                slider = new Slider(paramObject);\n            }\n\n            slider.initInterface();\n\n            //on envoie la valeur initiale au serveur\n            if (!this.contextAudio) {\n                let param = {\n                    \"adresseOsc\":slider.adresseOsc,\n                    \"typeVal\":slider.typeVal,\n                    \"value\":slider.valueA\n                };\n                slider.onValueChange(param);\n            }\n\n            //on ajoute le nouvel objet au tableau de sliders\n            this.collSliders.push(slider);\n            //on envoie la valeur initiale pour MAX\n            //slider.onValueChange(slider.adresseOsc,slider.typeVal,slider.valueA);\n        }\n\n    }\n\n    loadKnobs(){\n\n        //on crée tous les objets Knob présents dans le DOM\n        let collKnobsDom = document.querySelectorAll(\".knob\");\n\n        //on récupère tous les objets du DOM de la classe knob\n        for (let knobDom of collKnobsDom){\n            //pour chaque objet du DOM de la classe knob on crée un objet javascript knob\n            let knob;\n\n            let paramObject = {\n                \"elementDom\":knobDom,\n                \"id\":knobDom.id,\n                \"legende\":knobDom.dataset.legende,\n                \"angleDepart\":parseInt(knobDom.dataset.angleDepart),\n                \"angleArrivee\":parseInt(knobDom.dataset.angleArrivee),\n                \"valeurMin\": knobDom.dataset.valeurMin,\n                \"valeurMax\":knobDom.dataset.valeurMax,\n                \"valeur\":parseFloat(knobDom.dataset.valeurInit),\n                \"width\":knobDom.dataset.width,\n                \"height\":knobDom.dataset.width,\n                \"scale\":parseFloat(knobDom.dataset.width/300.0),//le elementDom de base a été créé dans un carré de 300 pixels de côté\n                \"couleur\":knobDom.dataset.couleur,\n            };\n\n            if (!this.contextAudio) {\n                paramObject=ObjectsKontrol.jsonConcat(paramObject,{\"adresseOsc\":knobDom.dataset.adresseOsc});\n                paramObject=ObjectsKontrol.jsonConcat(paramObject,{\"typeVal\":knobDom.dataset.typeVal});\n            }\n            paramObject=ObjectsKontrol.jsonConcat(paramObject,this.paramContext);\n\n            knob = new Knob(paramObject);\n\n            knob.initInterface();\n\n            //on envoie la valeur initiale au serveur\n            if (!this.contextAudio) {\n                let param = {\n                    \"adresseOsc\":knob.adresseOsc,\n                    \"typeVal\":knob.typeVal,\n                    \"value\":knob.valeurA\n                };\n                knob.onValueChange(param);\n            }\n\n            //on ajoute le nouvel objet au tableau des knobs\n            this.collKnobs.push(knob);\n        }\n\n    }\n\n    loadBangs(){\n        //on crée tous les objets Bang présents dans le DOM\n        let collBangs = document.querySelectorAll(\".bang\");\n\n        //on récupère tous les objets du DOM de la classe bang\n        for (let bangDom of collBangs){\n            //pour chaque objet du DOM de la classe bang on crée un objet javascript bang\n\n            let bang;\n\n            let paramObject ={\n\n                \"elementDom\":bangDom,\n                \"id\":bangDom.id,\n                \"legende\":bangDom.dataset.legende,\n                \"width\":bangDom.dataset.width,\n                \"scale\":parseFloat(bangDom.dataset.width/300.0),//le elementDom de base a été créé dans un carré de 300 pixels de côté\n                \"styleBorder\":bangDom.dataset.styleBorder,\n                \"couleur\":bangDom.dataset.couleur,\n            };\n\n            if (!this.contextAudio) {\n                paramObject=ObjectsKontrol.jsonConcat(paramObject,{\"adresseOsc\":bangDom.dataset.adresseOsc});\n                //typeVal forcément \"i\"\n            }\n            paramObject=ObjectsKontrol.jsonConcat(paramObject,this.paramContext);\n\n            bang = new Bang(paramObject);\n\n            bang.initInterface();\n\n            //ATTENTION penser à envoyer la valeur initiale si OSC\n            //on ajoute le nouvel objet au tableau des bangs\n            this.collBangs.push(bang);\n        }\n    }\n\n    loadToggles(){\n\n        //on crée tous les objets Toggle présents dans le DOM\n        let collToggles = document.querySelectorAll(\".toggle\");\n\n        //on récupère tous les objets du DOM de la classe toggle\n        for (let toggleDom of collToggles){\n            //pour chaque objet du DOM de la classe toggle on crée un objet javascript toggle\n            let toggle;\n\n            let paramObject ={\n                \"elementDom\":toggleDom,\n                \"legende\":toggleDom.dataset.legende,\n                \"etatToggle\":parseInt(toggleDom.dataset.etatInit),\n                \"width\":toggleDom.dataset.width,\n                \"scale\":parseFloat(toggleDom.dataset.width/300.0),//le elementDom de base a été créé dans un carré de 300 pixels de côté\n                \"styleBorder\":toggleDom.dataset.styleBorder,\n                \"couleur\":toggleDom.dataset.couleur,\n            };\n\n            if (!this.contextAudio) {\n                paramObject=ObjectsKontrol.jsonConcat(paramObject,{\"adresseOsc\":toggleDom.dataset.adresseOsc});\n                //typeVal forcément \"i\"\n            }\n            paramObject=ObjectsKontrol.jsonConcat(paramObject,this.paramContext);\n\n            toggle = new Toggle(paramObject);\n\n            toggle.initInterface();\n\n            //on envoie la valeur initiale au serveur\n            if (!this.contextAudio) {\n                let param = {\n                    \"adresseOsc\":toggle.adresseOsc,\n                    \"typeVal\":\"i\",\n                    \"value\":toggle.etatToggle\n                };\n                toggle.onValueChange(param);\n            }\n\n            //on ajoute le nouvel objet au tableau des toggles\n            this.collToggles.push(toggle);\n        }\n    }\n\n    loadLeds(){\n        //on crée tous les objets Bang présents dans le DOM\n        let collLeds = document.querySelectorAll(\".led\");\n\n        //on récupère tous les objets du DOM de la classe bang\n        for (let ledDom of collLeds){\n            //pour chaque objet du DOM de la classe bang on crée un objet javascript bang\n\n            let led;\n\n            let paramObject ={\n\n                \"elementDom\":ledDom,\n                \"id\":ledDom.id,\n                \"legende\":ledDom.dataset.legende,\n                \"width\":ledDom.dataset.width,\n                \"scale\":parseFloat(ledDom.dataset.width/300.0),//le elementDom de base a été créé dans un carré de 300 pixels de côté\n                \"styleBorder\":ledDom.dataset.styleBorder,\n                \"couleur\":ledDom.dataset.couleur,\n            };\n\n            if (!this.contextAudio) {\n                paramObject=ObjectsKontrol.jsonConcat(paramObject,{\"adresseOsc\":ledDom.dataset.adresseOsc});\n                //typeVal forcément \"i\"\n            }\n            paramObject=ObjectsKontrol.jsonConcat(paramObject,this.paramContext);\n\n            led = new Led(paramObject);\n\n            led.initInterface();\n\n            //on ajoute le nouvel objet au tableau des bangs\n            this.collLeds.push(led);\n        }\n    }\n\n    loadOuts(contextAudio){\n        //on crée tous les objets Bang présents dans le DOM\n        let collOuts = document.querySelectorAll(\".out\");\n\n        //on récupère tous les objets du DOM de la classe bang\n        for (let outDom of collOuts){\n            //pour chaque objet du DOM de la classe bang on crée un objet javascript bang\n            let out;\n\n            let paramObject ={\n                \"elementDom\":outDom,\n                \"id\":outDom.id,\n                \"legende\":outDom.dataset.legende,\n                \"width\":outDom.dataset.width,\n                \"height\":outDom.dataset.height,\n                \"scale\":parseFloat(outDom.dataset.width/300.0),//le elementDom de base a été créé dans un carré de 300 pixels de côté\n                \"styleBorder\":outDom.dataset.styleBorder,\n                \"couleur\":outDom.dataset.couleur,\n            };\n\n            if (!this.contextAudio) {\n                paramObject=ObjectsKontrol.jsonConcat(paramObject,{\"adresseOsc\":outDom.dataset.adresseOsc});\n                //typeVal forcément \"i\"\n            }\n            paramObject=ObjectsKontrol.jsonConcat(paramObject,this.paramContext);\n\n            if (this.contextAudio){\n                out = new OutAudio(paramObject);\n            }\n            else{\n                out = new Out(paramObject);\n            }\n\n            out.initInterface();\n            //ATTENTION penser à envoyer la valeur initiale si OSC\n            //on ajoute le nouvel objet au tableau des bangs\n            this.collOuts.push(out);\n        }\n    }\n\n    loadOscillators(){\n        //on crée tous les oscillator présents dans le DOM\n        let collOscillatorsDom = document.querySelectorAll(\".oscillator\");\n\n        //on récupère tous les objets du DOM de la classe oscillator\n        for (let oscillatorDom of collOscillatorsDom){\n            //pour chaque objet du DOM de la classe oscillator on crée un objet javascript oscillator\n            let oscillator;\n\n            let paramObject ={\n                \"elementDom\":oscillatorDom,\n                \"id\":oscillatorDom.id,\n                \"type\":oscillatorDom.dataset.type,\n                \"valeurMinFreq\": oscillatorDom.dataset.valeurMinFreq,\n                \"valeurMaxFreq\":oscillatorDom.dataset.valeurMaxFreq,\n                \"frequency\":oscillatorDom.dataset.frequency,\n                \"valeurMinAmpl\": oscillatorDom.dataset.valeurMinAmpl,\n                \"valeurMaxAmpl\":oscillatorDom.dataset.valeurMaxAmpl,\n                \"amplitude\":oscillatorDom.dataset.amplitude,\n                \"scale\":parseFloat(oscillatorDom.height/100.0),//la hauteur de base vaut 100 pixels\n            };\n\n            if (!this.contextAudio) {\n                paramObject=ObjectsKontrol.jsonConcat(paramObject,{\"adresseOsc\":oscillatorDom.dataset.adresseOsc});\n                paramObject=ObjectsKontrol.jsonConcat(paramObject,{\"typeVal\":oscillatorDom.dataset.typeVal});\n            }\n            paramObject=ObjectsKontrol.jsonConcat(paramObject,this.paramContext);\n\n            if (this.contextAudio){\n                oscillator = new OscillatorAudio(paramObject);\n            }\n            else{\n                oscillator = new Oscillator(paramObject);\n            }\n\n            oscillator.initInterface();\n            //ATTENTION penser à envoyer la valeur initiale si OSC\n            //on ajoute le nouvel objet au tableau des oscillators\n            this.collOscillators.push(oscillator);\n        }\n    }\n\n    configureOscillators(contextAudio){\n\n        if (contextAudio) {\n            for (let oscillator of this.collOscillators){\n                let id=oscillator.id+\"-knobAmpl\";\n                let knobAmpl=this.getObjectById(\"knob\",id);\n                //on termine de configurer les différents objets\n                knobAmpl.onValueChange = function(param){oscillator.changeAmplitude(param.value)};\n                id=oscillator.id+\"-knobFreq\";\n                let knobFreq=this.getObjectById(\"knob\",id);\n                knobFreq.onValueChange = function(param){oscillator.changeFrequency(param.value)};\n            }\n        }\n    }\n\n    getObjectById(type, id) {\n\n        let collection;\n\n        switch (type) {\n            case \"oscillator\":\n                collection=this.collOscillators;\n                break;\n            case \"bang\":\n                collection=this.collBangs;\n                break;\n            case \"toggle\":\n                collection=this.collToggles;\n                break;\n            case \"knob\":\n                collection=this.collKnobs;\n                break;\n            case \"slider\":\n                collection=this.collSliders;\n                break;\n            case \"out\":\n                collection=this.collOuts;\n                break;\n        }\n\n        let rechercheElementDom = document.getElementById(id);\n\n        for (let element of collection) {\n            if (element.elementDom === rechercheElementDom) {\n                return element;\n                break;\n            }\n        }\n    }\n\n    getObjectByAddressOsc(adr){\n\n        let collection=this.collLeds;\n\n        for (let element of collection) {\n            if (element.adresseOsc === adr) {\n                return element;\n                break;\n            }\n        }\n    }\n\n    receptionMessageOsc(addressOsc,messageOsc){\n\n        let object = this.getObjectByAddressOsc(addressOsc);\n\n        object.receptionMessageOsc(messageOsc);\n\n    }\n\n    static jsonConcat(o1, o2) {\n        for (var key in o2) {\n            o1[key] = o2[key];\n        }\n        return o1;\n    }\n}\n\n\n//# sourceURL=webpack:///./src/assets/js/objectsKontrol.js?");

/***/ }),

/***/ "./src/assets/js/wsLink.js":
/*!*********************************!*\
  !*** ./src/assets/js/wsLink.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("class wsLink\n{\n    constructor(wsServer,wsPort) {\n        //on définit la websocket\n        this.ws = new osc.WebSocketPort({\n            url: \"ws://\"+wsServer+\":\"+wsPort, // URL to your Web Socket server.\n            metadata: true\n        });\n        this.ws.connexionState=false;\n        //on ouvre la WebSocket\n        this.ws.open();\n        this.ws.on(\"ready\", function () {\n            console.log(\"Liaison ouverte...\");\n            //this fait référence à this.ws\n            this.connexionState = true;\n        });\n        //VOIR SI PAS AUTRE METHODE\n        this.ws.receptionMessageOsc=function(){};\n        this.ws.on(\"message\", function (oscMsg) {\n            this.receptionMessageOsc(oscMsg)\n        });\n    }\n\n    sendValueOsc(param) {\n        console.log(\"SENT : adresse OSC :\"+param.adresseOsc + \",type valeur \" +param.typeVal+\",valeur : \"+param.value);\n        this.ws.send({\n            address: param.adresseOsc,\n            args: [\n                {\n                    type: param.typeVal,\n                    value: param.value\n                }\n            ]\n        })\n    }\n}\n\n\n\n//# sourceURL=webpack:///./src/assets/js/wsLink.js?");

/***/ }),

/***/ "./src/index_osc.js":
/*!**************************!*\
  !*** ./src/index_osc.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("//require(\"../node_modules/osc/dist/osc\");\n__webpack_require__(/*! ../node_modules/osc/dist/osc-browser */ \"./node_modules/osc/dist/osc-browser.js\");\n__webpack_require__(/*! ./assets/js/wsLink */ \"./src/assets/js/wsLink.js\");\n__webpack_require__(/*! ./assets/js/objectsKontrol */ \"./src/assets/js/objectsKontrol.js\");\n\n\n//connexion websocket\nlet divContainer = document.getElementById(\"container\");\nlet webSocketServer=divContainer.dataset.webSocketServer;\nlet webSocketPort=divContainer.dataset.webSocketPort;\nlet wsLink1 = new wsLink(webSocketServer,webSocketPort);\n\n//initialisation objectsKontrol\nlet objetsK = new ObjectsKontrol(wsLink1);\n\nfunction initInterface(){\n    objetsK.loadObjects();\n    objetsK.configureObjects();\n}\n\n//lance initialisation objectsKontrol si ws ouvert\n//bout de code à remplacer par un promise\nfunction checkConnexionState() {\n    if(wsLink1.ws.connexionState === false) {\n        window.setTimeout(checkConnexionState, 100);\n    } else {\n        wsLink1.ws.receptionMessageOsc=function(oscMsg){\n            console.log(\"Received from server: \", oscMsg);\n            console.log(\"OSC address: \"+oscMsg['address']);\n            let addressOsc=oscMsg['address'];\n            console.log(\"type: \"+oscMsg['args'][0]['type']+\" value: \"+oscMsg['args'][0]['value']);\n            let messageOsc=oscMsg['args'][0]['value'];\n            objetsK.receptionMessageOsc(addressOsc,messageOsc);\n        };\n        initInterface();\n    }\n}\n\ncheckConnexionState();\n\n//# sourceURL=webpack:///./src/index_osc.js?");

/***/ })

/******/ });